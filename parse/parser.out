Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ABS
    ATN
    CLK
    COS
    EXP
    INT
    LOG
    REM
    RND
    SGN
    SIN
    SQR
    TAB
    TAN

Grammar

Rule 0     S' -> line
Rule 1     line -> INTEGER statement
Rule 2     line -> INTEGER
Rule 3     line -> error statement
Rule 4     statement -> let
Rule 5     statement -> end
Rule 6     statement -> if
Rule 7     statement -> goto
Rule 8     statement -> for
Rule 9     statement -> next
Rule 10    statement -> print
Rule 11    statement -> cls
Rule 12    statement -> input
Rule 13    statement -> def
Rule 14    statement -> dumpvar
Rule 15    statement -> dumpfun
Rule 16    statement -> on
Rule 17    statement -> gosub
Rule 18    statement -> return
Rule 19    statement -> data
Rule 20    statement -> restore
Rule 21    statement -> read
Rule 22    statement -> dim
Rule 23    statement -> randomize
Rule 24    statement -> stop
Rule 25    statement -> option
Rule 26    statement -> eval_exp
Rule 27    option -> OPTION BASE INTEGER
Rule 28    option -> OPTION error INTEGER
Rule 29    option -> OPTION BASE error
Rule 30    eval_exp -> EVAL numeric_expression
Rule 31    randomize -> RANDOMIZE
Rule 32    let -> LET STRING_VARIABLE EQUALS string_expression
Rule 33    let -> LET NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression
Rule 34    let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression
Rule 35    let -> LET STRING_ARRAY INTEGER RPAREN EQUALS string_expression
Rule 36    let -> LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression
Rule 37    let -> LET SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression
Rule 38    dim -> DIM STRING_ARRAY INTEGER RPAREN
Rule 39    dim -> DIM NUMERIC_ARRAY INTEGER RPAREN
Rule 40    dim -> DIM STRING_ARRAY INTEGER COMMA INTEGER RPAREN
Rule 41    dim -> DIM NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
Rule 42    dim -> DIM error INTEGER RPAREN
Rule 43    dim -> DIM error INTEGER COMMA INTEGER RPAREN
Rule 44    dumpvar -> DUMPVAR
Rule 45    dumpfun -> DUMPFUN
Rule 46    if -> IF numeric_expression EQUALS numeric_expression THEN INTEGER
Rule 47    if -> IF numeric_expression LT GT numeric_expression THEN INTEGER
Rule 48    if -> IF numeric_expression GT numeric_expression THEN INTEGER
Rule 49    if -> IF numeric_expression LT numeric_expression THEN INTEGER
Rule 50    if -> IF numeric_expression GT EQUALS numeric_expression THEN INTEGER
Rule 51    if -> IF numeric_expression LT EQUALS numeric_expression THEN INTEGER
Rule 52    if -> IF string_expression EQUALS string_expression THEN INTEGER
Rule 53    goto -> GOTO INTEGER
Rule 54    goto -> GOTO error
Rule 55    gosub -> GOSUB INTEGER
Rule 56    gosub -> GOSUB error
Rule 57    return -> RETURN
Rule 58    on -> ON numeric_expression GO TO line_number_list
Rule 59    on -> ON error GO TO line_number_list
Rule 60    on -> ON numeric_expression error TO line_number_list
Rule 61    on -> ON numeric_expression GO error line_number_list
Rule 62    on -> ON numeric_expression GO TO error
Rule 63    line_number_list -> line_number_list line_number_list_sep line_number_list
Rule 64    line_number_list -> INTEGER
Rule 65    line_number_list_sep -> COMMA
Rule 66    data -> DATA data_list
Rule 67    data_list -> data_list data_list_sep data_list
Rule 68    data_list -> expression
Rule 69    data_list_sep -> COMMA
Rule 70    read -> READ read_list
Rule 71    read_list -> read_list read_list_sep read_list
Rule 72    read_list -> SIMPLE_NUMERIC_VARIABLE
Rule 73    read_list -> STRING_VARIABLE
Rule 74    read_list_sep -> COMMA
Rule 75    restore -> RESTORE
Rule 76    for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression
Rule 77    for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression
Rule 78    next -> NEXT SIMPLE_NUMERIC_VARIABLE
Rule 79    print -> PRINT print_list
Rule 80    print -> PRINT
Rule 81    print_list -> print_list_sep print_list
Rule 82    print_list -> print_list print_list_sep print_list
Rule 83    print_list -> print_list print_list_sep
Rule 84    print_list -> print_list_sep
Rule 85    print_list -> expression
Rule 86    print_list_sep -> print_semi_colon
Rule 87    print_list_sep -> print_comma
Rule 88    print_semi_colon -> SEMI_COLON
Rule 89    print_comma -> COMMA
Rule 90    def -> DEF FN EQUALS fn_body_numeric_expression
Rule 91    def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression
Rule 92    fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN
Rule 93    fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
Rule 94    fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression
Rule 95    fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression
Rule 96    fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression
Rule 97    fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression
Rule 98    fn_body_numeric_expression -> empty
Rule 99    fn_body_numeric_expression -> fn_body_primary
Rule 100   fn_body_numeric_expression -> MINUS fn_body_numeric_expression
Rule 101   fn_body_primary -> INTEGER
Rule 102   fn_body_primary -> FLOAT
Rule 103   fn_body_primary -> fn_body_u_num_fn
Rule 104   fn_body_primary -> fn_body_b_num_fn
Rule 105   fn_body_primary -> fn_body_simple_numeric_variable
Rule 106   fn_body_primary -> fn_body_numeric_array
Rule 107   fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN
Rule 108   fn_body_u_num_fn -> FN
Rule 109   fn_body_b_num_fn -> B_NUM_FN empty
Rule 110   fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression
Rule 111   fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE
Rule 112   fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN
Rule 113   fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
Rule 114   fn_body_numeric_variable -> fn_body_simple_numeric_variable
Rule 115   fn_body_numeric_variable -> fn_body_numeric_array
Rule 116   cls -> CLS
Rule 117   end -> END
Rule 118   stop -> STOP
Rule 119   input -> INPUT string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE
Rule 120   input -> INPUT string_expression SEMI_COLON STRING_VARIABLE
Rule 121   input -> INPUT SIMPLE_NUMERIC_VARIABLE
Rule 122   input -> INPUT STRING_VARIABLE
Rule 123   expression -> string_expression
Rule 124   expression -> numeric_expression
Rule 125   numeric_expression -> LPAREN numeric_expression RPAREN
Rule 126   numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression
Rule 127   numeric_expression -> numeric_expression TIMES numeric_expression
Rule 128   numeric_expression -> numeric_expression DIVIDE numeric_expression
Rule 129   numeric_expression -> numeric_expression PLUS numeric_expression
Rule 130   numeric_expression -> numeric_expression MINUS numeric_expression
Rule 131   numeric_expression -> empty
Rule 132   numeric_expression -> primary
Rule 133   numeric_expression -> MINUS numeric_expression
Rule 134   primary -> INTEGER
Rule 135   primary -> FLOAT
Rule 136   primary -> u_num_fn
Rule 137   primary -> b_num_fn
Rule 138   primary -> simple_numeric_variable
Rule 139   primary -> numeric_array
Rule 140   b_num_fn -> B_NUM_FN empty
Rule 141   b_num_fn -> B_NUM_FN numeric_expression
Rule 142   u_num_fn -> FN numeric_expression
Rule 143   u_num_fn -> FN
Rule 144   simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE
Rule 145   numeric_array -> NUMERIC_ARRAY INTEGER RPAREN
Rule 146   numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
Rule 147   numeric_variable -> simple_numeric_variable
Rule 148   numeric_variable -> numeric_array
Rule 149   string_expression -> string_literal
Rule 150   string_expression -> string_variable
Rule 151   string_expression -> b_str_fn
Rule 152   string_literal -> STRING_LITERAL
Rule 153   string_variable -> simple_string_variable
Rule 154   string_variable -> string_array
Rule 155   b_str_fn -> B_STR_FN empty
Rule 156   b_str_fn -> B_STR_FN numeric_expression
Rule 157   simple_string_variable -> STRING_VARIABLE
Rule 158   string_array -> STRING_ARRAY numeric_expression RPAREN
Rule 159   string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
Rule 160   empty -> LPAREN RPAREN

Terminals, with rules where they appear

ABS                  : 
ATN                  : 
BASE                 : 27 29
B_NUM_FN             : 109 110 140 141
B_STR_FN             : 155 156
CIRCUMFLEX           : 93 126
CLK                  : 
CLS                  : 116
COMMA                : 34 36 40 41 43 65 69 74 89 113 146 159
COS                  : 
DATA                 : 66
DEF                  : 90 91
DIM                  : 38 39 40 41 42 43
DIVIDE               : 95 128
DUMPFUN              : 45
DUMPVAR              : 44
END                  : 117
EQUALS               : 32 33 34 35 36 37 46 50 51 52 76 77 90 91
EVAL                 : 30
EXP                  : 
FLOAT                : 102 135
FN                   : 90 91 107 108 142 143
FOR                  : 76 77
GO                   : 58 59 61 62
GOSUB                : 55 56
GOTO                 : 53 54
GT                   : 47 48 50
IF                   : 46 47 48 49 50 51 52
INPUT                : 119 120 121 122
INT                  : 
INTEGER              : 1 2 27 28 33 34 34 35 36 36 38 39 40 40 41 41 42 43 43 46 47 48 49 50 51 52 53 55 64 101 112 113 113 134 145 146 146
LET                  : 32 33 34 35 36 37
LOG                  : 
LPAREN               : 91 92 107 125 160
LT                   : 47 49 51
MINUS                : 97 100 130 133
NEXT                 : 78
NUMERIC_ARRAY        : 33 34 39 41 112 113 145 146
ON                   : 58 59 60 61 62
OPTION               : 27 28 29
PLUS                 : 96 129
PRINT                : 79 80
RANDOMIZE            : 31
READ                 : 70
REM                  : 
RESTORE              : 75
RETURN               : 57
RND                  : 
RPAREN               : 33 34 35 36 38 39 40 41 42 43 91 92 107 112 113 125 145 146 158 159 160
SEMI_COLON           : 88 119 120
SGN                  : 
SIMPLE_NUMERIC_VARIABLE : 37 72 76 77 78 91 111 119 121 144
SIN                  : 
SQR                  : 
STEP                 : 76
STOP                 : 118
STRING_ARRAY         : 35 36 38 40 158 159
STRING_LITERAL       : 152
STRING_VARIABLE      : 32 73 120 122 157
TAB                  : 
TAN                  : 
THEN                 : 46 47 48 49 50 51 52
TIMES                : 94 127
TO                   : 58 59 60 62 76 77
error                : 3 28 29 42 43 54 56 59 60 61 62

Nonterminals, with rules where they appear

b_num_fn             : 137
b_str_fn             : 151
cls                  : 11
data                 : 19
data_list            : 66 67 67
data_list_sep        : 67
def                  : 13
dim                  : 22
dumpfun              : 15
dumpvar              : 14
empty                : 98 109 131 140 155
end                  : 5
eval_exp             : 26
expression           : 68 85
fn_body_b_num_fn     : 104
fn_body_numeric_array : 106 115
fn_body_numeric_expression : 90 91 92 93 93 94 94 95 95 96 96 97 97 100 107 110
fn_body_numeric_variable : 
fn_body_primary      : 99
fn_body_simple_numeric_variable : 105 114
fn_body_u_num_fn     : 103
for                  : 8
gosub                : 17
goto                 : 7
if                   : 6
input                : 12
let                  : 4
line                 : 0
line_number_list     : 58 59 60 61 63 63
line_number_list_sep : 63
next                 : 9
numeric_array        : 139 148
numeric_expression   : 30 33 34 37 46 46 47 47 48 48 49 49 50 50 51 51 58 60 61 62 76 76 76 77 77 124 125 126 126 127 127 128 128 129 129 130 130 133 141 142 156 158 159 159
numeric_variable     : 
on                   : 16
option               : 25
primary              : 132
print                : 10
print_comma          : 87
print_list           : 79 81 82 82 83
print_list_sep       : 81 82 83 84
print_semi_colon     : 86
randomize            : 23
read                 : 21
read_list            : 70 71 71
read_list_sep        : 71
restore              : 20
return               : 18
simple_numeric_variable : 138 147
simple_string_variable : 153
statement            : 1 3
stop                 : 24
string_array         : 154
string_expression    : 32 35 36 52 52 119 120 123
string_literal       : 149
string_variable      : 150
u_num_fn             : 136

Parsing method: LALR

state 0

    (0) S' -> . line
    (1) line -> . INTEGER statement
    (2) line -> . INTEGER
    (3) line -> . error statement

    INTEGER         shift and go to state 2
    error           shift and go to state 3

    line                           shift and go to state 1

state 1

    (0) S' -> line .



state 2

    (1) line -> INTEGER . statement
    (2) line -> INTEGER .
    (4) statement -> . let
    (5) statement -> . end
    (6) statement -> . if
    (7) statement -> . goto
    (8) statement -> . for
    (9) statement -> . next
    (10) statement -> . print
    (11) statement -> . cls
    (12) statement -> . input
    (13) statement -> . def
    (14) statement -> . dumpvar
    (15) statement -> . dumpfun
    (16) statement -> . on
    (17) statement -> . gosub
    (18) statement -> . return
    (19) statement -> . data
    (20) statement -> . restore
    (21) statement -> . read
    (22) statement -> . dim
    (23) statement -> . randomize
    (24) statement -> . stop
    (25) statement -> . option
    (26) statement -> . eval_exp
    (32) let -> . LET STRING_VARIABLE EQUALS string_expression
    (33) let -> . LET NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression
    (34) let -> . LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression
    (35) let -> . LET STRING_ARRAY INTEGER RPAREN EQUALS string_expression
    (36) let -> . LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression
    (37) let -> . LET SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression
    (117) end -> . END
    (46) if -> . IF numeric_expression EQUALS numeric_expression THEN INTEGER
    (47) if -> . IF numeric_expression LT GT numeric_expression THEN INTEGER
    (48) if -> . IF numeric_expression GT numeric_expression THEN INTEGER
    (49) if -> . IF numeric_expression LT numeric_expression THEN INTEGER
    (50) if -> . IF numeric_expression GT EQUALS numeric_expression THEN INTEGER
    (51) if -> . IF numeric_expression LT EQUALS numeric_expression THEN INTEGER
    (52) if -> . IF string_expression EQUALS string_expression THEN INTEGER
    (53) goto -> . GOTO INTEGER
    (54) goto -> . GOTO error
    (76) for -> . FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression
    (77) for -> . FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression
    (78) next -> . NEXT SIMPLE_NUMERIC_VARIABLE
    (79) print -> . PRINT print_list
    (80) print -> . PRINT
    (116) cls -> . CLS
    (119) input -> . INPUT string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE
    (120) input -> . INPUT string_expression SEMI_COLON STRING_VARIABLE
    (121) input -> . INPUT SIMPLE_NUMERIC_VARIABLE
    (122) input -> . INPUT STRING_VARIABLE
    (90) def -> . DEF FN EQUALS fn_body_numeric_expression
    (91) def -> . DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression
    (44) dumpvar -> . DUMPVAR
    (45) dumpfun -> . DUMPFUN
    (58) on -> . ON numeric_expression GO TO line_number_list
    (59) on -> . ON error GO TO line_number_list
    (60) on -> . ON numeric_expression error TO line_number_list
    (61) on -> . ON numeric_expression GO error line_number_list
    (62) on -> . ON numeric_expression GO TO error
    (55) gosub -> . GOSUB INTEGER
    (56) gosub -> . GOSUB error
    (57) return -> . RETURN
    (66) data -> . DATA data_list
    (75) restore -> . RESTORE
    (70) read -> . READ read_list
    (38) dim -> . DIM STRING_ARRAY INTEGER RPAREN
    (39) dim -> . DIM NUMERIC_ARRAY INTEGER RPAREN
    (40) dim -> . DIM STRING_ARRAY INTEGER COMMA INTEGER RPAREN
    (41) dim -> . DIM NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
    (42) dim -> . DIM error INTEGER RPAREN
    (43) dim -> . DIM error INTEGER COMMA INTEGER RPAREN
    (31) randomize -> . RANDOMIZE
    (118) stop -> . STOP
    (27) option -> . OPTION BASE INTEGER
    (28) option -> . OPTION error INTEGER
    (29) option -> . OPTION BASE error
    (30) eval_exp -> . EVAL numeric_expression

    $end            reduce using rule 2 (line -> INTEGER .)
    LET             shift and go to state 28
    END             shift and go to state 29
    IF              shift and go to state 30
    GOTO            shift and go to state 31
    FOR             shift and go to state 32
    NEXT            shift and go to state 33
    PRINT           shift and go to state 34
    CLS             shift and go to state 35
    INPUT           shift and go to state 36
    DEF             shift and go to state 37
    DUMPVAR         shift and go to state 38
    DUMPFUN         shift and go to state 39
    ON              shift and go to state 40
    GOSUB           shift and go to state 41
    RETURN          shift and go to state 42
    DATA            shift and go to state 43
    RESTORE         shift and go to state 44
    READ            shift and go to state 45
    DIM             shift and go to state 46
    RANDOMIZE       shift and go to state 47
    STOP            shift and go to state 48
    OPTION          shift and go to state 49
    EVAL            shift and go to state 50

    statement                      shift and go to state 4
    let                            shift and go to state 5
    end                            shift and go to state 6
    if                             shift and go to state 7
    goto                           shift and go to state 8
    for                            shift and go to state 9
    next                           shift and go to state 10
    print                          shift and go to state 11
    cls                            shift and go to state 12
    input                          shift and go to state 13
    def                            shift and go to state 14
    dumpvar                        shift and go to state 15
    dumpfun                        shift and go to state 16
    on                             shift and go to state 17
    gosub                          shift and go to state 18
    return                         shift and go to state 19
    data                           shift and go to state 20
    restore                        shift and go to state 21
    read                           shift and go to state 22
    dim                            shift and go to state 23
    randomize                      shift and go to state 24
    stop                           shift and go to state 25
    option                         shift and go to state 26
    eval_exp                       shift and go to state 27

state 3

    (3) line -> error . statement
    (4) statement -> . let
    (5) statement -> . end
    (6) statement -> . if
    (7) statement -> . goto
    (8) statement -> . for
    (9) statement -> . next
    (10) statement -> . print
    (11) statement -> . cls
    (12) statement -> . input
    (13) statement -> . def
    (14) statement -> . dumpvar
    (15) statement -> . dumpfun
    (16) statement -> . on
    (17) statement -> . gosub
    (18) statement -> . return
    (19) statement -> . data
    (20) statement -> . restore
    (21) statement -> . read
    (22) statement -> . dim
    (23) statement -> . randomize
    (24) statement -> . stop
    (25) statement -> . option
    (26) statement -> . eval_exp
    (32) let -> . LET STRING_VARIABLE EQUALS string_expression
    (33) let -> . LET NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression
    (34) let -> . LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression
    (35) let -> . LET STRING_ARRAY INTEGER RPAREN EQUALS string_expression
    (36) let -> . LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression
    (37) let -> . LET SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression
    (117) end -> . END
    (46) if -> . IF numeric_expression EQUALS numeric_expression THEN INTEGER
    (47) if -> . IF numeric_expression LT GT numeric_expression THEN INTEGER
    (48) if -> . IF numeric_expression GT numeric_expression THEN INTEGER
    (49) if -> . IF numeric_expression LT numeric_expression THEN INTEGER
    (50) if -> . IF numeric_expression GT EQUALS numeric_expression THEN INTEGER
    (51) if -> . IF numeric_expression LT EQUALS numeric_expression THEN INTEGER
    (52) if -> . IF string_expression EQUALS string_expression THEN INTEGER
    (53) goto -> . GOTO INTEGER
    (54) goto -> . GOTO error
    (76) for -> . FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression
    (77) for -> . FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression
    (78) next -> . NEXT SIMPLE_NUMERIC_VARIABLE
    (79) print -> . PRINT print_list
    (80) print -> . PRINT
    (116) cls -> . CLS
    (119) input -> . INPUT string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE
    (120) input -> . INPUT string_expression SEMI_COLON STRING_VARIABLE
    (121) input -> . INPUT SIMPLE_NUMERIC_VARIABLE
    (122) input -> . INPUT STRING_VARIABLE
    (90) def -> . DEF FN EQUALS fn_body_numeric_expression
    (91) def -> . DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression
    (44) dumpvar -> . DUMPVAR
    (45) dumpfun -> . DUMPFUN
    (58) on -> . ON numeric_expression GO TO line_number_list
    (59) on -> . ON error GO TO line_number_list
    (60) on -> . ON numeric_expression error TO line_number_list
    (61) on -> . ON numeric_expression GO error line_number_list
    (62) on -> . ON numeric_expression GO TO error
    (55) gosub -> . GOSUB INTEGER
    (56) gosub -> . GOSUB error
    (57) return -> . RETURN
    (66) data -> . DATA data_list
    (75) restore -> . RESTORE
    (70) read -> . READ read_list
    (38) dim -> . DIM STRING_ARRAY INTEGER RPAREN
    (39) dim -> . DIM NUMERIC_ARRAY INTEGER RPAREN
    (40) dim -> . DIM STRING_ARRAY INTEGER COMMA INTEGER RPAREN
    (41) dim -> . DIM NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
    (42) dim -> . DIM error INTEGER RPAREN
    (43) dim -> . DIM error INTEGER COMMA INTEGER RPAREN
    (31) randomize -> . RANDOMIZE
    (118) stop -> . STOP
    (27) option -> . OPTION BASE INTEGER
    (28) option -> . OPTION error INTEGER
    (29) option -> . OPTION BASE error
    (30) eval_exp -> . EVAL numeric_expression

    LET             shift and go to state 28
    END             shift and go to state 29
    IF              shift and go to state 30
    GOTO            shift and go to state 31
    FOR             shift and go to state 32
    NEXT            shift and go to state 33
    PRINT           shift and go to state 34
    CLS             shift and go to state 35
    INPUT           shift and go to state 36
    DEF             shift and go to state 37
    DUMPVAR         shift and go to state 38
    DUMPFUN         shift and go to state 39
    ON              shift and go to state 40
    GOSUB           shift and go to state 41
    RETURN          shift and go to state 42
    DATA            shift and go to state 43
    RESTORE         shift and go to state 44
    READ            shift and go to state 45
    DIM             shift and go to state 46
    RANDOMIZE       shift and go to state 47
    STOP            shift and go to state 48
    OPTION          shift and go to state 49
    EVAL            shift and go to state 50

    statement                      shift and go to state 51
    let                            shift and go to state 5
    end                            shift and go to state 6
    if                             shift and go to state 7
    goto                           shift and go to state 8
    for                            shift and go to state 9
    next                           shift and go to state 10
    print                          shift and go to state 11
    cls                            shift and go to state 12
    input                          shift and go to state 13
    def                            shift and go to state 14
    dumpvar                        shift and go to state 15
    dumpfun                        shift and go to state 16
    on                             shift and go to state 17
    gosub                          shift and go to state 18
    return                         shift and go to state 19
    data                           shift and go to state 20
    restore                        shift and go to state 21
    read                           shift and go to state 22
    dim                            shift and go to state 23
    randomize                      shift and go to state 24
    stop                           shift and go to state 25
    option                         shift and go to state 26
    eval_exp                       shift and go to state 27

state 4

    (1) line -> INTEGER statement .

    $end            reduce using rule 1 (line -> INTEGER statement .)


state 5

    (4) statement -> let .

    $end            reduce using rule 4 (statement -> let .)


state 6

    (5) statement -> end .

    $end            reduce using rule 5 (statement -> end .)


state 7

    (6) statement -> if .

    $end            reduce using rule 6 (statement -> if .)


state 8

    (7) statement -> goto .

    $end            reduce using rule 7 (statement -> goto .)


state 9

    (8) statement -> for .

    $end            reduce using rule 8 (statement -> for .)


state 10

    (9) statement -> next .

    $end            reduce using rule 9 (statement -> next .)


state 11

    (10) statement -> print .

    $end            reduce using rule 10 (statement -> print .)


state 12

    (11) statement -> cls .

    $end            reduce using rule 11 (statement -> cls .)


state 13

    (12) statement -> input .

    $end            reduce using rule 12 (statement -> input .)


state 14

    (13) statement -> def .

    $end            reduce using rule 13 (statement -> def .)


state 15

    (14) statement -> dumpvar .

    $end            reduce using rule 14 (statement -> dumpvar .)


state 16

    (15) statement -> dumpfun .

    $end            reduce using rule 15 (statement -> dumpfun .)


state 17

    (16) statement -> on .

    $end            reduce using rule 16 (statement -> on .)


state 18

    (17) statement -> gosub .

    $end            reduce using rule 17 (statement -> gosub .)


state 19

    (18) statement -> return .

    $end            reduce using rule 18 (statement -> return .)


state 20

    (19) statement -> data .

    $end            reduce using rule 19 (statement -> data .)


state 21

    (20) statement -> restore .

    $end            reduce using rule 20 (statement -> restore .)


state 22

    (21) statement -> read .

    $end            reduce using rule 21 (statement -> read .)


state 23

    (22) statement -> dim .

    $end            reduce using rule 22 (statement -> dim .)


state 24

    (23) statement -> randomize .

    $end            reduce using rule 23 (statement -> randomize .)


state 25

    (24) statement -> stop .

    $end            reduce using rule 24 (statement -> stop .)


state 26

    (25) statement -> option .

    $end            reduce using rule 25 (statement -> option .)


state 27

    (26) statement -> eval_exp .

    $end            reduce using rule 26 (statement -> eval_exp .)


state 28

    (32) let -> LET . STRING_VARIABLE EQUALS string_expression
    (33) let -> LET . NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression
    (34) let -> LET . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression
    (35) let -> LET . STRING_ARRAY INTEGER RPAREN EQUALS string_expression
    (36) let -> LET . STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression
    (37) let -> LET . SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression

    STRING_VARIABLE shift and go to state 52
    NUMERIC_ARRAY   shift and go to state 53
    STRING_ARRAY    shift and go to state 54
    SIMPLE_NUMERIC_VARIABLE shift and go to state 55


state 29

    (117) end -> END .

    $end            reduce using rule 117 (end -> END .)


state 30

    (46) if -> IF . numeric_expression EQUALS numeric_expression THEN INTEGER
    (47) if -> IF . numeric_expression LT GT numeric_expression THEN INTEGER
    (48) if -> IF . numeric_expression GT numeric_expression THEN INTEGER
    (49) if -> IF . numeric_expression LT numeric_expression THEN INTEGER
    (50) if -> IF . numeric_expression GT EQUALS numeric_expression THEN INTEGER
    (51) if -> IF . numeric_expression LT EQUALS numeric_expression THEN INTEGER
    (52) if -> IF . string_expression EQUALS string_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80

    numeric_expression             shift and go to state 56
    string_expression              shift and go to state 58
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 31

    (53) goto -> GOTO . INTEGER
    (54) goto -> GOTO . error

    INTEGER         shift and go to state 81
    error           shift and go to state 82


state 32

    (76) for -> FOR . SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression
    (77) for -> FOR . SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression

    SIMPLE_NUMERIC_VARIABLE shift and go to state 83


state 33

    (78) next -> NEXT . SIMPLE_NUMERIC_VARIABLE

    SIMPLE_NUMERIC_VARIABLE shift and go to state 84


state 34

    (79) print -> PRINT . print_list
    (80) print -> PRINT .
    (81) print_list -> . print_list_sep print_list
    (82) print_list -> . print_list print_list_sep print_list
    (83) print_list -> . print_list print_list_sep
    (84) print_list -> . print_list_sep
    (85) print_list -> . expression
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (123) expression -> . string_expression
    (124) expression -> . numeric_expression
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    $end            reduce using rule 80 (print -> PRINT .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    print_list                     shift and go to state 85
    print_list_sep                 shift and go to state 86
    expression                     shift and go to state 87
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89
    string_expression              shift and go to state 90
    numeric_expression             shift and go to state 91
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 35

    (116) cls -> CLS .

    $end            reduce using rule 116 (cls -> CLS .)


state 36

    (119) input -> INPUT . string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE
    (120) input -> INPUT . string_expression SEMI_COLON STRING_VARIABLE
    (121) input -> INPUT . SIMPLE_NUMERIC_VARIABLE
    (122) input -> INPUT . STRING_VARIABLE
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    SIMPLE_NUMERIC_VARIABLE shift and go to state 95
    STRING_VARIABLE shift and go to state 96
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    STRING_ARRAY    shift and go to state 80

    string_expression              shift and go to state 94
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 37

    (90) def -> DEF . FN EQUALS fn_body_numeric_expression
    (91) def -> DEF . FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression

    FN              shift and go to state 97


state 38

    (44) dumpvar -> DUMPVAR .

    $end            reduce using rule 44 (dumpvar -> DUMPVAR .)


state 39

    (45) dumpfun -> DUMPFUN .

    $end            reduce using rule 45 (dumpfun -> DUMPFUN .)


state 40

    (58) on -> ON . numeric_expression GO TO line_number_list
    (59) on -> ON . error GO TO line_number_list
    (60) on -> ON . numeric_expression error TO line_number_list
    (61) on -> ON . numeric_expression GO error line_number_list
    (62) on -> ON . numeric_expression GO TO error
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    error           shift and go to state 99
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 98
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 41

    (55) gosub -> GOSUB . INTEGER
    (56) gosub -> GOSUB . error

    INTEGER         shift and go to state 100
    error           shift and go to state 101


state 42

    (57) return -> RETURN .

    $end            reduce using rule 57 (return -> RETURN .)


state 43

    (66) data -> DATA . data_list
    (67) data_list -> . data_list data_list_sep data_list
    (68) data_list -> . expression
    (123) expression -> . string_expression
    (124) expression -> . numeric_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    data_list                      shift and go to state 102
    expression                     shift and go to state 103
    string_expression              shift and go to state 90
    numeric_expression             shift and go to state 91
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 44

    (75) restore -> RESTORE .

    $end            reduce using rule 75 (restore -> RESTORE .)


state 45

    (70) read -> READ . read_list
    (71) read_list -> . read_list read_list_sep read_list
    (72) read_list -> . SIMPLE_NUMERIC_VARIABLE
    (73) read_list -> . STRING_VARIABLE

    SIMPLE_NUMERIC_VARIABLE shift and go to state 105
    STRING_VARIABLE shift and go to state 106

    read_list                      shift and go to state 104

state 46

    (38) dim -> DIM . STRING_ARRAY INTEGER RPAREN
    (39) dim -> DIM . NUMERIC_ARRAY INTEGER RPAREN
    (40) dim -> DIM . STRING_ARRAY INTEGER COMMA INTEGER RPAREN
    (41) dim -> DIM . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN
    (42) dim -> DIM . error INTEGER RPAREN
    (43) dim -> DIM . error INTEGER COMMA INTEGER RPAREN

    STRING_ARRAY    shift and go to state 107
    NUMERIC_ARRAY   shift and go to state 108
    error           shift and go to state 109


state 47

    (31) randomize -> RANDOMIZE .

    $end            reduce using rule 31 (randomize -> RANDOMIZE .)


state 48

    (118) stop -> STOP .

    $end            reduce using rule 118 (stop -> STOP .)


state 49

    (27) option -> OPTION . BASE INTEGER
    (28) option -> OPTION . error INTEGER
    (29) option -> OPTION . BASE error

    BASE            shift and go to state 110
    error           shift and go to state 111


state 50

    (30) eval_exp -> EVAL . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 112
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 51

    (3) line -> error statement .

    $end            reduce using rule 3 (line -> error statement .)


state 52

    (32) let -> LET STRING_VARIABLE . EQUALS string_expression

    EQUALS          shift and go to state 113


state 53

    (33) let -> LET NUMERIC_ARRAY . INTEGER RPAREN EQUALS numeric_expression
    (34) let -> LET NUMERIC_ARRAY . INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression

    INTEGER         shift and go to state 114


state 54

    (35) let -> LET STRING_ARRAY . INTEGER RPAREN EQUALS string_expression
    (36) let -> LET STRING_ARRAY . INTEGER COMMA INTEGER RPAREN EQUALS string_expression

    INTEGER         shift and go to state 115


state 55

    (37) let -> LET SIMPLE_NUMERIC_VARIABLE . EQUALS numeric_expression

    EQUALS          shift and go to state 116


state 56

    (46) if -> IF numeric_expression . EQUALS numeric_expression THEN INTEGER
    (47) if -> IF numeric_expression . LT GT numeric_expression THEN INTEGER
    (48) if -> IF numeric_expression . GT numeric_expression THEN INTEGER
    (49) if -> IF numeric_expression . LT numeric_expression THEN INTEGER
    (50) if -> IF numeric_expression . GT EQUALS numeric_expression THEN INTEGER
    (51) if -> IF numeric_expression . LT EQUALS numeric_expression THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          shift and go to state 117
    LT              shift and go to state 118
    GT              shift and go to state 119
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 57

    (134) primary -> INTEGER .

    EQUALS          reduce using rule 134 (primary -> INTEGER .)
    LT              reduce using rule 134 (primary -> INTEGER .)
    GT              reduce using rule 134 (primary -> INTEGER .)
    CIRCUMFLEX      reduce using rule 134 (primary -> INTEGER .)
    TIMES           reduce using rule 134 (primary -> INTEGER .)
    DIVIDE          reduce using rule 134 (primary -> INTEGER .)
    PLUS            reduce using rule 134 (primary -> INTEGER .)
    MINUS           reduce using rule 134 (primary -> INTEGER .)
    SEMI_COLON      reduce using rule 134 (primary -> INTEGER .)
    COMMA           reduce using rule 134 (primary -> INTEGER .)
    $end            reduce using rule 134 (primary -> INTEGER .)
    GO              reduce using rule 134 (primary -> INTEGER .)
    error           reduce using rule 134 (primary -> INTEGER .)
    RPAREN          reduce using rule 134 (primary -> INTEGER .)
    THEN            reduce using rule 134 (primary -> INTEGER .)
    TO              reduce using rule 134 (primary -> INTEGER .)
    STEP            reduce using rule 134 (primary -> INTEGER .)


state 58

    (52) if -> IF string_expression . EQUALS string_expression THEN INTEGER

    EQUALS          shift and go to state 125


state 59

    (125) numeric_expression -> LPAREN . numeric_expression RPAREN
    (160) empty -> LPAREN . RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 126
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 60

    (133) numeric_expression -> MINUS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 128
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 61

    (131) numeric_expression -> empty .

    EQUALS          reduce using rule 131 (numeric_expression -> empty .)
    LT              reduce using rule 131 (numeric_expression -> empty .)
    GT              reduce using rule 131 (numeric_expression -> empty .)
    CIRCUMFLEX      reduce using rule 131 (numeric_expression -> empty .)
    TIMES           reduce using rule 131 (numeric_expression -> empty .)
    DIVIDE          reduce using rule 131 (numeric_expression -> empty .)
    PLUS            reduce using rule 131 (numeric_expression -> empty .)
    MINUS           reduce using rule 131 (numeric_expression -> empty .)
    SEMI_COLON      reduce using rule 131 (numeric_expression -> empty .)
    COMMA           reduce using rule 131 (numeric_expression -> empty .)
    $end            reduce using rule 131 (numeric_expression -> empty .)
    GO              reduce using rule 131 (numeric_expression -> empty .)
    error           reduce using rule 131 (numeric_expression -> empty .)
    RPAREN          reduce using rule 131 (numeric_expression -> empty .)
    THEN            reduce using rule 131 (numeric_expression -> empty .)
    TO              reduce using rule 131 (numeric_expression -> empty .)
    STEP            reduce using rule 131 (numeric_expression -> empty .)


state 62

    (132) numeric_expression -> primary .

    EQUALS          reduce using rule 132 (numeric_expression -> primary .)
    LT              reduce using rule 132 (numeric_expression -> primary .)
    GT              reduce using rule 132 (numeric_expression -> primary .)
    CIRCUMFLEX      reduce using rule 132 (numeric_expression -> primary .)
    TIMES           reduce using rule 132 (numeric_expression -> primary .)
    DIVIDE          reduce using rule 132 (numeric_expression -> primary .)
    PLUS            reduce using rule 132 (numeric_expression -> primary .)
    MINUS           reduce using rule 132 (numeric_expression -> primary .)
    SEMI_COLON      reduce using rule 132 (numeric_expression -> primary .)
    COMMA           reduce using rule 132 (numeric_expression -> primary .)
    $end            reduce using rule 132 (numeric_expression -> primary .)
    GO              reduce using rule 132 (numeric_expression -> primary .)
    error           reduce using rule 132 (numeric_expression -> primary .)
    RPAREN          reduce using rule 132 (numeric_expression -> primary .)
    THEN            reduce using rule 132 (numeric_expression -> primary .)
    TO              reduce using rule 132 (numeric_expression -> primary .)
    STEP            reduce using rule 132 (numeric_expression -> primary .)


state 63

    (149) string_expression -> string_literal .

    EQUALS          reduce using rule 149 (string_expression -> string_literal .)
    SEMI_COLON      reduce using rule 149 (string_expression -> string_literal .)
    COMMA           reduce using rule 149 (string_expression -> string_literal .)
    $end            reduce using rule 149 (string_expression -> string_literal .)
    THEN            reduce using rule 149 (string_expression -> string_literal .)


state 64

    (150) string_expression -> string_variable .

    EQUALS          reduce using rule 150 (string_expression -> string_variable .)
    SEMI_COLON      reduce using rule 150 (string_expression -> string_variable .)
    COMMA           reduce using rule 150 (string_expression -> string_variable .)
    $end            reduce using rule 150 (string_expression -> string_variable .)
    THEN            reduce using rule 150 (string_expression -> string_variable .)


state 65

    (151) string_expression -> b_str_fn .

    EQUALS          reduce using rule 151 (string_expression -> b_str_fn .)
    SEMI_COLON      reduce using rule 151 (string_expression -> b_str_fn .)
    COMMA           reduce using rule 151 (string_expression -> b_str_fn .)
    $end            reduce using rule 151 (string_expression -> b_str_fn .)
    THEN            reduce using rule 151 (string_expression -> b_str_fn .)


state 66

    (135) primary -> FLOAT .

    EQUALS          reduce using rule 135 (primary -> FLOAT .)
    LT              reduce using rule 135 (primary -> FLOAT .)
    GT              reduce using rule 135 (primary -> FLOAT .)
    CIRCUMFLEX      reduce using rule 135 (primary -> FLOAT .)
    TIMES           reduce using rule 135 (primary -> FLOAT .)
    DIVIDE          reduce using rule 135 (primary -> FLOAT .)
    PLUS            reduce using rule 135 (primary -> FLOAT .)
    MINUS           reduce using rule 135 (primary -> FLOAT .)
    SEMI_COLON      reduce using rule 135 (primary -> FLOAT .)
    COMMA           reduce using rule 135 (primary -> FLOAT .)
    $end            reduce using rule 135 (primary -> FLOAT .)
    GO              reduce using rule 135 (primary -> FLOAT .)
    error           reduce using rule 135 (primary -> FLOAT .)
    RPAREN          reduce using rule 135 (primary -> FLOAT .)
    THEN            reduce using rule 135 (primary -> FLOAT .)
    TO              reduce using rule 135 (primary -> FLOAT .)
    STEP            reduce using rule 135 (primary -> FLOAT .)


state 67

    (136) primary -> u_num_fn .

    EQUALS          reduce using rule 136 (primary -> u_num_fn .)
    LT              reduce using rule 136 (primary -> u_num_fn .)
    GT              reduce using rule 136 (primary -> u_num_fn .)
    CIRCUMFLEX      reduce using rule 136 (primary -> u_num_fn .)
    TIMES           reduce using rule 136 (primary -> u_num_fn .)
    DIVIDE          reduce using rule 136 (primary -> u_num_fn .)
    PLUS            reduce using rule 136 (primary -> u_num_fn .)
    MINUS           reduce using rule 136 (primary -> u_num_fn .)
    SEMI_COLON      reduce using rule 136 (primary -> u_num_fn .)
    COMMA           reduce using rule 136 (primary -> u_num_fn .)
    $end            reduce using rule 136 (primary -> u_num_fn .)
    GO              reduce using rule 136 (primary -> u_num_fn .)
    error           reduce using rule 136 (primary -> u_num_fn .)
    RPAREN          reduce using rule 136 (primary -> u_num_fn .)
    THEN            reduce using rule 136 (primary -> u_num_fn .)
    TO              reduce using rule 136 (primary -> u_num_fn .)
    STEP            reduce using rule 136 (primary -> u_num_fn .)


state 68

    (137) primary -> b_num_fn .

    EQUALS          reduce using rule 137 (primary -> b_num_fn .)
    LT              reduce using rule 137 (primary -> b_num_fn .)
    GT              reduce using rule 137 (primary -> b_num_fn .)
    CIRCUMFLEX      reduce using rule 137 (primary -> b_num_fn .)
    TIMES           reduce using rule 137 (primary -> b_num_fn .)
    DIVIDE          reduce using rule 137 (primary -> b_num_fn .)
    PLUS            reduce using rule 137 (primary -> b_num_fn .)
    MINUS           reduce using rule 137 (primary -> b_num_fn .)
    SEMI_COLON      reduce using rule 137 (primary -> b_num_fn .)
    COMMA           reduce using rule 137 (primary -> b_num_fn .)
    $end            reduce using rule 137 (primary -> b_num_fn .)
    GO              reduce using rule 137 (primary -> b_num_fn .)
    error           reduce using rule 137 (primary -> b_num_fn .)
    RPAREN          reduce using rule 137 (primary -> b_num_fn .)
    THEN            reduce using rule 137 (primary -> b_num_fn .)
    TO              reduce using rule 137 (primary -> b_num_fn .)
    STEP            reduce using rule 137 (primary -> b_num_fn .)


state 69

    (138) primary -> simple_numeric_variable .

    EQUALS          reduce using rule 138 (primary -> simple_numeric_variable .)
    LT              reduce using rule 138 (primary -> simple_numeric_variable .)
    GT              reduce using rule 138 (primary -> simple_numeric_variable .)
    CIRCUMFLEX      reduce using rule 138 (primary -> simple_numeric_variable .)
    TIMES           reduce using rule 138 (primary -> simple_numeric_variable .)
    DIVIDE          reduce using rule 138 (primary -> simple_numeric_variable .)
    PLUS            reduce using rule 138 (primary -> simple_numeric_variable .)
    MINUS           reduce using rule 138 (primary -> simple_numeric_variable .)
    SEMI_COLON      reduce using rule 138 (primary -> simple_numeric_variable .)
    COMMA           reduce using rule 138 (primary -> simple_numeric_variable .)
    $end            reduce using rule 138 (primary -> simple_numeric_variable .)
    GO              reduce using rule 138 (primary -> simple_numeric_variable .)
    error           reduce using rule 138 (primary -> simple_numeric_variable .)
    RPAREN          reduce using rule 138 (primary -> simple_numeric_variable .)
    THEN            reduce using rule 138 (primary -> simple_numeric_variable .)
    TO              reduce using rule 138 (primary -> simple_numeric_variable .)
    STEP            reduce using rule 138 (primary -> simple_numeric_variable .)


state 70

    (139) primary -> numeric_array .

    EQUALS          reduce using rule 139 (primary -> numeric_array .)
    LT              reduce using rule 139 (primary -> numeric_array .)
    GT              reduce using rule 139 (primary -> numeric_array .)
    CIRCUMFLEX      reduce using rule 139 (primary -> numeric_array .)
    TIMES           reduce using rule 139 (primary -> numeric_array .)
    DIVIDE          reduce using rule 139 (primary -> numeric_array .)
    PLUS            reduce using rule 139 (primary -> numeric_array .)
    MINUS           reduce using rule 139 (primary -> numeric_array .)
    SEMI_COLON      reduce using rule 139 (primary -> numeric_array .)
    COMMA           reduce using rule 139 (primary -> numeric_array .)
    $end            reduce using rule 139 (primary -> numeric_array .)
    GO              reduce using rule 139 (primary -> numeric_array .)
    error           reduce using rule 139 (primary -> numeric_array .)
    RPAREN          reduce using rule 139 (primary -> numeric_array .)
    THEN            reduce using rule 139 (primary -> numeric_array .)
    TO              reduce using rule 139 (primary -> numeric_array .)
    STEP            reduce using rule 139 (primary -> numeric_array .)


state 71

    (152) string_literal -> STRING_LITERAL .

    EQUALS          reduce using rule 152 (string_literal -> STRING_LITERAL .)
    SEMI_COLON      reduce using rule 152 (string_literal -> STRING_LITERAL .)
    COMMA           reduce using rule 152 (string_literal -> STRING_LITERAL .)
    $end            reduce using rule 152 (string_literal -> STRING_LITERAL .)
    THEN            reduce using rule 152 (string_literal -> STRING_LITERAL .)


state 72

    (153) string_variable -> simple_string_variable .

    EQUALS          reduce using rule 153 (string_variable -> simple_string_variable .)
    SEMI_COLON      reduce using rule 153 (string_variable -> simple_string_variable .)
    COMMA           reduce using rule 153 (string_variable -> simple_string_variable .)
    $end            reduce using rule 153 (string_variable -> simple_string_variable .)
    THEN            reduce using rule 153 (string_variable -> simple_string_variable .)


state 73

    (154) string_variable -> string_array .

    EQUALS          reduce using rule 154 (string_variable -> string_array .)
    SEMI_COLON      reduce using rule 154 (string_variable -> string_array .)
    COMMA           reduce using rule 154 (string_variable -> string_array .)
    $end            reduce using rule 154 (string_variable -> string_array .)
    THEN            reduce using rule 154 (string_variable -> string_array .)


state 74

    (155) b_str_fn -> B_STR_FN . empty
    (156) b_str_fn -> B_STR_FN . numeric_expression
    (160) empty -> . LPAREN RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 131
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    empty                          shift and go to state 129
    numeric_expression             shift and go to state 130
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 75

    (142) u_num_fn -> FN . numeric_expression
    (143) u_num_fn -> FN .
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    EQUALS          reduce using rule 143 (u_num_fn -> FN .)
    LT              reduce using rule 143 (u_num_fn -> FN .)
    GT              reduce using rule 143 (u_num_fn -> FN .)
    CIRCUMFLEX      reduce using rule 143 (u_num_fn -> FN .)
    TIMES           reduce using rule 143 (u_num_fn -> FN .)
    DIVIDE          reduce using rule 143 (u_num_fn -> FN .)
    PLUS            reduce using rule 143 (u_num_fn -> FN .)
    MINUS           reduce using rule 143 (u_num_fn -> FN .)
    SEMI_COLON      reduce using rule 143 (u_num_fn -> FN .)
    COMMA           reduce using rule 143 (u_num_fn -> FN .)
    $end            reduce using rule 143 (u_num_fn -> FN .)
    GO              reduce using rule 143 (u_num_fn -> FN .)
    error           reduce using rule 143 (u_num_fn -> FN .)
    RPAREN          reduce using rule 143 (u_num_fn -> FN .)
    THEN            reduce using rule 143 (u_num_fn -> FN .)
    TO              reduce using rule 143 (u_num_fn -> FN .)
    STEP            reduce using rule 143 (u_num_fn -> FN .)
    LPAREN          shift and go to state 59
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

  ! MINUS           [ shift and go to state 60 ]

    numeric_expression             shift and go to state 132
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 76

    (140) b_num_fn -> B_NUM_FN . empty
    (141) b_num_fn -> B_NUM_FN . numeric_expression
    (160) empty -> . LPAREN RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 131
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    empty                          shift and go to state 133
    numeric_expression             shift and go to state 134
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 77

    (144) simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .

    EQUALS          reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    LT              reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    GT              reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    CIRCUMFLEX      reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    TIMES           reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    DIVIDE          reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    PLUS            reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    MINUS           reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    SEMI_COLON      reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    COMMA           reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    $end            reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    GO              reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    error           reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    RPAREN          reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    THEN            reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    TO              reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    STEP            reduce using rule 144 (simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)


state 78

    (145) numeric_array -> NUMERIC_ARRAY . INTEGER RPAREN
    (146) numeric_array -> NUMERIC_ARRAY . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 135


state 79

    (157) simple_string_variable -> STRING_VARIABLE .

    EQUALS          reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)
    SEMI_COLON      reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)
    COMMA           reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)
    $end            reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)
    THEN            reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)


state 80

    (158) string_array -> STRING_ARRAY . numeric_expression RPAREN
    (159) string_array -> STRING_ARRAY . numeric_expression COMMA numeric_expression RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 136
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 81

    (53) goto -> GOTO INTEGER .

    $end            reduce using rule 53 (goto -> GOTO INTEGER .)


state 82

    (54) goto -> GOTO error .

    $end            reduce using rule 54 (goto -> GOTO error .)


state 83

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE . EQUALS numeric_expression TO numeric_expression STEP numeric_expression
    (77) for -> FOR SIMPLE_NUMERIC_VARIABLE . EQUALS numeric_expression TO numeric_expression

    EQUALS          shift and go to state 137


state 84

    (78) next -> NEXT SIMPLE_NUMERIC_VARIABLE .

    $end            reduce using rule 78 (next -> NEXT SIMPLE_NUMERIC_VARIABLE .)


state 85

    (79) print -> PRINT print_list .
    (82) print_list -> print_list . print_list_sep print_list
    (83) print_list -> print_list . print_list_sep
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA

    $end            reduce using rule 79 (print -> PRINT print_list .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93

    print_list_sep                 shift and go to state 138
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89

state 86

    (81) print_list -> print_list_sep . print_list
    (84) print_list -> print_list_sep .
    (81) print_list -> . print_list_sep print_list
    (82) print_list -> . print_list print_list_sep print_list
    (83) print_list -> . print_list print_list_sep
    (84) print_list -> . print_list_sep
    (85) print_list -> . expression
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (123) expression -> . string_expression
    (124) expression -> . numeric_expression
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

  ! shift/reduce conflict for SEMI_COLON resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 84 (print_list -> print_list_sep .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

  ! SEMI_COLON      [ reduce using rule 84 (print_list -> print_list_sep .) ]
  ! COMMA           [ reduce using rule 84 (print_list -> print_list_sep .) ]

    print_list_sep                 shift and go to state 86
    print_list                     shift and go to state 139
    expression                     shift and go to state 87
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89
    string_expression              shift and go to state 90
    numeric_expression             shift and go to state 91
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 87

    (85) print_list -> expression .

    SEMI_COLON      reduce using rule 85 (print_list -> expression .)
    COMMA           reduce using rule 85 (print_list -> expression .)
    $end            reduce using rule 85 (print_list -> expression .)


state 88

    (86) print_list_sep -> print_semi_colon .

    SEMI_COLON      reduce using rule 86 (print_list_sep -> print_semi_colon .)
    COMMA           reduce using rule 86 (print_list_sep -> print_semi_colon .)
    LPAREN          reduce using rule 86 (print_list_sep -> print_semi_colon .)
    MINUS           reduce using rule 86 (print_list_sep -> print_semi_colon .)
    STRING_LITERAL  reduce using rule 86 (print_list_sep -> print_semi_colon .)
    B_STR_FN        reduce using rule 86 (print_list_sep -> print_semi_colon .)
    INTEGER         reduce using rule 86 (print_list_sep -> print_semi_colon .)
    FLOAT           reduce using rule 86 (print_list_sep -> print_semi_colon .)
    STRING_VARIABLE reduce using rule 86 (print_list_sep -> print_semi_colon .)
    STRING_ARRAY    reduce using rule 86 (print_list_sep -> print_semi_colon .)
    FN              reduce using rule 86 (print_list_sep -> print_semi_colon .)
    B_NUM_FN        reduce using rule 86 (print_list_sep -> print_semi_colon .)
    SIMPLE_NUMERIC_VARIABLE reduce using rule 86 (print_list_sep -> print_semi_colon .)
    NUMERIC_ARRAY   reduce using rule 86 (print_list_sep -> print_semi_colon .)
    $end            reduce using rule 86 (print_list_sep -> print_semi_colon .)


state 89

    (87) print_list_sep -> print_comma .

    SEMI_COLON      reduce using rule 87 (print_list_sep -> print_comma .)
    COMMA           reduce using rule 87 (print_list_sep -> print_comma .)
    LPAREN          reduce using rule 87 (print_list_sep -> print_comma .)
    MINUS           reduce using rule 87 (print_list_sep -> print_comma .)
    STRING_LITERAL  reduce using rule 87 (print_list_sep -> print_comma .)
    B_STR_FN        reduce using rule 87 (print_list_sep -> print_comma .)
    INTEGER         reduce using rule 87 (print_list_sep -> print_comma .)
    FLOAT           reduce using rule 87 (print_list_sep -> print_comma .)
    STRING_VARIABLE reduce using rule 87 (print_list_sep -> print_comma .)
    STRING_ARRAY    reduce using rule 87 (print_list_sep -> print_comma .)
    FN              reduce using rule 87 (print_list_sep -> print_comma .)
    B_NUM_FN        reduce using rule 87 (print_list_sep -> print_comma .)
    SIMPLE_NUMERIC_VARIABLE reduce using rule 87 (print_list_sep -> print_comma .)
    NUMERIC_ARRAY   reduce using rule 87 (print_list_sep -> print_comma .)
    $end            reduce using rule 87 (print_list_sep -> print_comma .)


state 90

    (123) expression -> string_expression .

    SEMI_COLON      reduce using rule 123 (expression -> string_expression .)
    COMMA           reduce using rule 123 (expression -> string_expression .)
    $end            reduce using rule 123 (expression -> string_expression .)


state 91

    (124) expression -> numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    SEMI_COLON      reduce using rule 124 (expression -> numeric_expression .)
    COMMA           reduce using rule 124 (expression -> numeric_expression .)
    $end            reduce using rule 124 (expression -> numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 92

    (88) print_semi_colon -> SEMI_COLON .

    SEMI_COLON      reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    COMMA           reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    LPAREN          reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    MINUS           reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    STRING_LITERAL  reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    B_STR_FN        reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    INTEGER         reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    FLOAT           reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    STRING_VARIABLE reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    STRING_ARRAY    reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    FN              reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    B_NUM_FN        reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    SIMPLE_NUMERIC_VARIABLE reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    NUMERIC_ARRAY   reduce using rule 88 (print_semi_colon -> SEMI_COLON .)
    $end            reduce using rule 88 (print_semi_colon -> SEMI_COLON .)


state 93

    (89) print_comma -> COMMA .

    SEMI_COLON      reduce using rule 89 (print_comma -> COMMA .)
    COMMA           reduce using rule 89 (print_comma -> COMMA .)
    LPAREN          reduce using rule 89 (print_comma -> COMMA .)
    MINUS           reduce using rule 89 (print_comma -> COMMA .)
    STRING_LITERAL  reduce using rule 89 (print_comma -> COMMA .)
    B_STR_FN        reduce using rule 89 (print_comma -> COMMA .)
    INTEGER         reduce using rule 89 (print_comma -> COMMA .)
    FLOAT           reduce using rule 89 (print_comma -> COMMA .)
    STRING_VARIABLE reduce using rule 89 (print_comma -> COMMA .)
    STRING_ARRAY    reduce using rule 89 (print_comma -> COMMA .)
    FN              reduce using rule 89 (print_comma -> COMMA .)
    B_NUM_FN        reduce using rule 89 (print_comma -> COMMA .)
    SIMPLE_NUMERIC_VARIABLE reduce using rule 89 (print_comma -> COMMA .)
    NUMERIC_ARRAY   reduce using rule 89 (print_comma -> COMMA .)
    $end            reduce using rule 89 (print_comma -> COMMA .)


state 94

    (119) input -> INPUT string_expression . SEMI_COLON SIMPLE_NUMERIC_VARIABLE
    (120) input -> INPUT string_expression . SEMI_COLON STRING_VARIABLE

    SEMI_COLON      shift and go to state 140


state 95

    (121) input -> INPUT SIMPLE_NUMERIC_VARIABLE .

    $end            reduce using rule 121 (input -> INPUT SIMPLE_NUMERIC_VARIABLE .)


state 96

    (122) input -> INPUT STRING_VARIABLE .
    (157) simple_string_variable -> STRING_VARIABLE .

    $end            reduce using rule 122 (input -> INPUT STRING_VARIABLE .)
    SEMI_COLON      reduce using rule 157 (simple_string_variable -> STRING_VARIABLE .)


state 97

    (90) def -> DEF FN . EQUALS fn_body_numeric_expression
    (91) def -> DEF FN . LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression

    EQUALS          shift and go to state 141
    LPAREN          shift and go to state 142


state 98

    (58) on -> ON numeric_expression . GO TO line_number_list
    (60) on -> ON numeric_expression . error TO line_number_list
    (61) on -> ON numeric_expression . GO error line_number_list
    (62) on -> ON numeric_expression . GO TO error
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    GO              shift and go to state 143
    error           shift and go to state 144
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 99

    (59) on -> ON error . GO TO line_number_list

    GO              shift and go to state 145


state 100

    (55) gosub -> GOSUB INTEGER .

    $end            reduce using rule 55 (gosub -> GOSUB INTEGER .)


state 101

    (56) gosub -> GOSUB error .

    $end            reduce using rule 56 (gosub -> GOSUB error .)


state 102

    (66) data -> DATA data_list .
    (67) data_list -> data_list . data_list_sep data_list
    (69) data_list_sep -> . COMMA

    $end            reduce using rule 66 (data -> DATA data_list .)
    COMMA           shift and go to state 147

    data_list_sep                  shift and go to state 146

state 103

    (68) data_list -> expression .

    COMMA           reduce using rule 68 (data_list -> expression .)
    $end            reduce using rule 68 (data_list -> expression .)


state 104

    (70) read -> READ read_list .
    (71) read_list -> read_list . read_list_sep read_list
    (74) read_list_sep -> . COMMA

    $end            reduce using rule 70 (read -> READ read_list .)
    COMMA           shift and go to state 149

    read_list_sep                  shift and go to state 148

state 105

    (72) read_list -> SIMPLE_NUMERIC_VARIABLE .

    COMMA           reduce using rule 72 (read_list -> SIMPLE_NUMERIC_VARIABLE .)
    $end            reduce using rule 72 (read_list -> SIMPLE_NUMERIC_VARIABLE .)


state 106

    (73) read_list -> STRING_VARIABLE .

    COMMA           reduce using rule 73 (read_list -> STRING_VARIABLE .)
    $end            reduce using rule 73 (read_list -> STRING_VARIABLE .)


state 107

    (38) dim -> DIM STRING_ARRAY . INTEGER RPAREN
    (40) dim -> DIM STRING_ARRAY . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 150


state 108

    (39) dim -> DIM NUMERIC_ARRAY . INTEGER RPAREN
    (41) dim -> DIM NUMERIC_ARRAY . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 151


state 109

    (42) dim -> DIM error . INTEGER RPAREN
    (43) dim -> DIM error . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 152


state 110

    (27) option -> OPTION BASE . INTEGER
    (29) option -> OPTION BASE . error

    INTEGER         shift and go to state 153
    error           shift and go to state 154


state 111

    (28) option -> OPTION error . INTEGER

    INTEGER         shift and go to state 155


state 112

    (30) eval_exp -> EVAL numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    $end            reduce using rule 30 (eval_exp -> EVAL numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 113

    (32) let -> LET STRING_VARIABLE EQUALS . string_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80

    string_expression              shift and go to state 156
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 114

    (33) let -> LET NUMERIC_ARRAY INTEGER . RPAREN EQUALS numeric_expression
    (34) let -> LET NUMERIC_ARRAY INTEGER . COMMA INTEGER RPAREN EQUALS numeric_expression

    RPAREN          shift and go to state 157
    COMMA           shift and go to state 158


state 115

    (35) let -> LET STRING_ARRAY INTEGER . RPAREN EQUALS string_expression
    (36) let -> LET STRING_ARRAY INTEGER . COMMA INTEGER RPAREN EQUALS string_expression

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 160


state 116

    (37) let -> LET SIMPLE_NUMERIC_VARIABLE EQUALS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 161
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 117

    (46) if -> IF numeric_expression EQUALS . numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 162
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 118

    (47) if -> IF numeric_expression LT . GT numeric_expression THEN INTEGER
    (49) if -> IF numeric_expression LT . numeric_expression THEN INTEGER
    (51) if -> IF numeric_expression LT . EQUALS numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    GT              shift and go to state 164
    EQUALS          shift and go to state 165
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 163
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 119

    (48) if -> IF numeric_expression GT . numeric_expression THEN INTEGER
    (50) if -> IF numeric_expression GT . EQUALS numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    EQUALS          shift and go to state 167
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 166
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 120

    (126) numeric_expression -> numeric_expression CIRCUMFLEX . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 168
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 121

    (127) numeric_expression -> numeric_expression TIMES . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 169
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 122

    (128) numeric_expression -> numeric_expression DIVIDE . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 170
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 123

    (129) numeric_expression -> numeric_expression PLUS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 171
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 124

    (130) numeric_expression -> numeric_expression MINUS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 172
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 125

    (52) if -> IF string_expression EQUALS . string_expression THEN INTEGER
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80

    string_expression              shift and go to state 173
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 126

    (125) numeric_expression -> LPAREN numeric_expression . RPAREN
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    RPAREN          shift and go to state 174
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 127

    (160) empty -> LPAREN RPAREN .

    EQUALS          reduce using rule 160 (empty -> LPAREN RPAREN .)
    LT              reduce using rule 160 (empty -> LPAREN RPAREN .)
    GT              reduce using rule 160 (empty -> LPAREN RPAREN .)
    CIRCUMFLEX      reduce using rule 160 (empty -> LPAREN RPAREN .)
    TIMES           reduce using rule 160 (empty -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 160 (empty -> LPAREN RPAREN .)
    PLUS            reduce using rule 160 (empty -> LPAREN RPAREN .)
    MINUS           reduce using rule 160 (empty -> LPAREN RPAREN .)
    SEMI_COLON      reduce using rule 160 (empty -> LPAREN RPAREN .)
    COMMA           reduce using rule 160 (empty -> LPAREN RPAREN .)
    $end            reduce using rule 160 (empty -> LPAREN RPAREN .)
    GO              reduce using rule 160 (empty -> LPAREN RPAREN .)
    error           reduce using rule 160 (empty -> LPAREN RPAREN .)
    RPAREN          reduce using rule 160 (empty -> LPAREN RPAREN .)
    THEN            reduce using rule 160 (empty -> LPAREN RPAREN .)
    TO              reduce using rule 160 (empty -> LPAREN RPAREN .)
    STEP            reduce using rule 160 (empty -> LPAREN RPAREN .)


state 128

    (133) numeric_expression -> MINUS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    LT              reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    GT              reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    CIRCUMFLEX      reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    TIMES           reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    DIVIDE          reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    PLUS            reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    MINUS           reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    SEMI_COLON      reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    COMMA           reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    $end            reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    GO              reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    error           reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    RPAREN          reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    THEN            reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    TO              reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)
    STEP            reduce using rule 133 (numeric_expression -> MINUS numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 120 ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 129

    (155) b_str_fn -> B_STR_FN empty .
    (131) numeric_expression -> empty .

  ! reduce/reduce conflict for EQUALS resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for THEN resolved using rule 131 (numeric_expression -> empty .)
    CIRCUMFLEX      reduce using rule 131 (numeric_expression -> empty .)
    TIMES           reduce using rule 131 (numeric_expression -> empty .)
    DIVIDE          reduce using rule 131 (numeric_expression -> empty .)
    PLUS            reduce using rule 131 (numeric_expression -> empty .)
    MINUS           reduce using rule 131 (numeric_expression -> empty .)
    EQUALS          reduce using rule 131 (numeric_expression -> empty .)
    SEMI_COLON      reduce using rule 131 (numeric_expression -> empty .)
    COMMA           reduce using rule 131 (numeric_expression -> empty .)
    $end            reduce using rule 131 (numeric_expression -> empty .)
    THEN            reduce using rule 131 (numeric_expression -> empty .)

  ! EQUALS          [ reduce using rule 155 (b_str_fn -> B_STR_FN empty .) ]
  ! SEMI_COLON      [ reduce using rule 155 (b_str_fn -> B_STR_FN empty .) ]
  ! COMMA           [ reduce using rule 155 (b_str_fn -> B_STR_FN empty .) ]
  ! $end            [ reduce using rule 155 (b_str_fn -> B_STR_FN empty .) ]
  ! THEN            [ reduce using rule 155 (b_str_fn -> B_STR_FN empty .) ]


state 130

    (156) b_str_fn -> B_STR_FN numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 156 (b_str_fn -> B_STR_FN numeric_expression .)
    SEMI_COLON      reduce using rule 156 (b_str_fn -> B_STR_FN numeric_expression .)
    COMMA           reduce using rule 156 (b_str_fn -> B_STR_FN numeric_expression .)
    $end            reduce using rule 156 (b_str_fn -> B_STR_FN numeric_expression .)
    THEN            reduce using rule 156 (b_str_fn -> B_STR_FN numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 131

    (160) empty -> LPAREN . RPAREN
    (125) numeric_expression -> LPAREN . numeric_expression RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 126
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 132

    (142) u_num_fn -> FN numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    LT              reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    GT              reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    CIRCUMFLEX      reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    TIMES           reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    DIVIDE          reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    PLUS            reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    MINUS           reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    SEMI_COLON      reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    COMMA           reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    $end            reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    GO              reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    error           reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    RPAREN          reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    THEN            reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    TO              reduce using rule 142 (u_num_fn -> FN numeric_expression .)
    STEP            reduce using rule 142 (u_num_fn -> FN numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 120 ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 133

    (140) b_num_fn -> B_NUM_FN empty .
    (131) numeric_expression -> empty .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for TIMES resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for PLUS resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for EQUALS resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for LT resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for GT resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for SEMI_COLON resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for COMMA resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for GO resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for error resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for THEN resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for TO resolved using rule 131 (numeric_expression -> empty .)
  ! reduce/reduce conflict for STEP resolved using rule 131 (numeric_expression -> empty .)
    CIRCUMFLEX      reduce using rule 131 (numeric_expression -> empty .)
    TIMES           reduce using rule 131 (numeric_expression -> empty .)
    DIVIDE          reduce using rule 131 (numeric_expression -> empty .)
    PLUS            reduce using rule 131 (numeric_expression -> empty .)
    MINUS           reduce using rule 131 (numeric_expression -> empty .)
    EQUALS          reduce using rule 131 (numeric_expression -> empty .)
    LT              reduce using rule 131 (numeric_expression -> empty .)
    GT              reduce using rule 131 (numeric_expression -> empty .)
    SEMI_COLON      reduce using rule 131 (numeric_expression -> empty .)
    COMMA           reduce using rule 131 (numeric_expression -> empty .)
    $end            reduce using rule 131 (numeric_expression -> empty .)
    GO              reduce using rule 131 (numeric_expression -> empty .)
    error           reduce using rule 131 (numeric_expression -> empty .)
    RPAREN          reduce using rule 131 (numeric_expression -> empty .)
    THEN            reduce using rule 131 (numeric_expression -> empty .)
    TO              reduce using rule 131 (numeric_expression -> empty .)
    STEP            reduce using rule 131 (numeric_expression -> empty .)

  ! EQUALS          [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! LT              [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! GT              [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! CIRCUMFLEX      [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! TIMES           [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! DIVIDE          [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! PLUS            [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! MINUS           [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! SEMI_COLON      [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! COMMA           [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! $end            [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! GO              [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! error           [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! RPAREN          [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! THEN            [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! TO              [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]
  ! STEP            [ reduce using rule 140 (b_num_fn -> B_NUM_FN empty .) ]


state 134

    (141) b_num_fn -> B_NUM_FN numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    LT              reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    GT              reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    CIRCUMFLEX      reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    TIMES           reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    DIVIDE          reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    PLUS            reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    MINUS           reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    SEMI_COLON      reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    COMMA           reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    $end            reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    GO              reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    error           reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    RPAREN          reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    THEN            reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    TO              reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)
    STEP            reduce using rule 141 (b_num_fn -> B_NUM_FN numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 120 ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 135

    (145) numeric_array -> NUMERIC_ARRAY INTEGER . RPAREN
    (146) numeric_array -> NUMERIC_ARRAY INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 175
    COMMA           shift and go to state 176


state 136

    (158) string_array -> STRING_ARRAY numeric_expression . RPAREN
    (159) string_array -> STRING_ARRAY numeric_expression . COMMA numeric_expression RPAREN
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    RPAREN          shift and go to state 177
    COMMA           shift and go to state 178
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 137

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS . numeric_expression TO numeric_expression STEP numeric_expression
    (77) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS . numeric_expression TO numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 179
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 138

    (82) print_list -> print_list print_list_sep . print_list
    (83) print_list -> print_list print_list_sep .
    (81) print_list -> . print_list_sep print_list
    (82) print_list -> . print_list print_list_sep print_list
    (83) print_list -> . print_list print_list_sep
    (84) print_list -> . print_list_sep
    (85) print_list -> . expression
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (123) expression -> . string_expression
    (124) expression -> . numeric_expression
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

  ! shift/reduce conflict for SEMI_COLON resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 83 (print_list -> print_list print_list_sep .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93
    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

  ! SEMI_COLON      [ reduce using rule 83 (print_list -> print_list print_list_sep .) ]
  ! COMMA           [ reduce using rule 83 (print_list -> print_list print_list_sep .) ]

    print_list                     shift and go to state 180
    print_list_sep                 shift and go to state 86
    expression                     shift and go to state 87
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89
    string_expression              shift and go to state 90
    numeric_expression             shift and go to state 91
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 139

    (81) print_list -> print_list_sep print_list .
    (82) print_list -> print_list . print_list_sep print_list
    (83) print_list -> print_list . print_list_sep
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA

  ! shift/reduce conflict for SEMI_COLON resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 81 (print_list -> print_list_sep print_list .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93

  ! SEMI_COLON      [ reduce using rule 81 (print_list -> print_list_sep print_list .) ]
  ! COMMA           [ reduce using rule 81 (print_list -> print_list_sep print_list .) ]

    print_list_sep                 shift and go to state 138
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89

state 140

    (119) input -> INPUT string_expression SEMI_COLON . SIMPLE_NUMERIC_VARIABLE
    (120) input -> INPUT string_expression SEMI_COLON . STRING_VARIABLE

    SIMPLE_NUMERIC_VARIABLE shift and go to state 181
    STRING_VARIABLE shift and go to state 182


state 141

    (90) def -> DEF FN EQUALS . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 184
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 142

    (91) def -> DEF FN LPAREN . SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression

    SIMPLE_NUMERIC_VARIABLE shift and go to state 198


state 143

    (58) on -> ON numeric_expression GO . TO line_number_list
    (61) on -> ON numeric_expression GO . error line_number_list
    (62) on -> ON numeric_expression GO . TO error

    TO              shift and go to state 199
    error           shift and go to state 200


state 144

    (60) on -> ON numeric_expression error . TO line_number_list

    TO              shift and go to state 201


state 145

    (59) on -> ON error GO . TO line_number_list

    TO              shift and go to state 202


state 146

    (67) data_list -> data_list data_list_sep . data_list
    (67) data_list -> . data_list data_list_sep data_list
    (68) data_list -> . expression
    (123) expression -> . string_expression
    (124) expression -> . numeric_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    data_list                      shift and go to state 203
    expression                     shift and go to state 103
    string_expression              shift and go to state 90
    numeric_expression             shift and go to state 91
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 147

    (69) data_list_sep -> COMMA .

    LPAREN          reduce using rule 69 (data_list_sep -> COMMA .)
    MINUS           reduce using rule 69 (data_list_sep -> COMMA .)
    STRING_LITERAL  reduce using rule 69 (data_list_sep -> COMMA .)
    B_STR_FN        reduce using rule 69 (data_list_sep -> COMMA .)
    INTEGER         reduce using rule 69 (data_list_sep -> COMMA .)
    FLOAT           reduce using rule 69 (data_list_sep -> COMMA .)
    STRING_VARIABLE reduce using rule 69 (data_list_sep -> COMMA .)
    STRING_ARRAY    reduce using rule 69 (data_list_sep -> COMMA .)
    FN              reduce using rule 69 (data_list_sep -> COMMA .)
    B_NUM_FN        reduce using rule 69 (data_list_sep -> COMMA .)
    SIMPLE_NUMERIC_VARIABLE reduce using rule 69 (data_list_sep -> COMMA .)
    NUMERIC_ARRAY   reduce using rule 69 (data_list_sep -> COMMA .)


state 148

    (71) read_list -> read_list read_list_sep . read_list
    (71) read_list -> . read_list read_list_sep read_list
    (72) read_list -> . SIMPLE_NUMERIC_VARIABLE
    (73) read_list -> . STRING_VARIABLE

    SIMPLE_NUMERIC_VARIABLE shift and go to state 105
    STRING_VARIABLE shift and go to state 106

    read_list                      shift and go to state 204

state 149

    (74) read_list_sep -> COMMA .

    SIMPLE_NUMERIC_VARIABLE reduce using rule 74 (read_list_sep -> COMMA .)
    STRING_VARIABLE reduce using rule 74 (read_list_sep -> COMMA .)


state 150

    (38) dim -> DIM STRING_ARRAY INTEGER . RPAREN
    (40) dim -> DIM STRING_ARRAY INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 205
    COMMA           shift and go to state 206


state 151

    (39) dim -> DIM NUMERIC_ARRAY INTEGER . RPAREN
    (41) dim -> DIM NUMERIC_ARRAY INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 207
    COMMA           shift and go to state 208


state 152

    (42) dim -> DIM error INTEGER . RPAREN
    (43) dim -> DIM error INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 209
    COMMA           shift and go to state 210


state 153

    (27) option -> OPTION BASE INTEGER .

    $end            reduce using rule 27 (option -> OPTION BASE INTEGER .)


state 154

    (29) option -> OPTION BASE error .

    $end            reduce using rule 29 (option -> OPTION BASE error .)


state 155

    (28) option -> OPTION error INTEGER .

    $end            reduce using rule 28 (option -> OPTION error INTEGER .)


state 156

    (32) let -> LET STRING_VARIABLE EQUALS string_expression .

    $end            reduce using rule 32 (let -> LET STRING_VARIABLE EQUALS string_expression .)


state 157

    (33) let -> LET NUMERIC_ARRAY INTEGER RPAREN . EQUALS numeric_expression

    EQUALS          shift and go to state 211


state 158

    (34) let -> LET NUMERIC_ARRAY INTEGER COMMA . INTEGER RPAREN EQUALS numeric_expression

    INTEGER         shift and go to state 212


state 159

    (35) let -> LET STRING_ARRAY INTEGER RPAREN . EQUALS string_expression

    EQUALS          shift and go to state 213


state 160

    (36) let -> LET STRING_ARRAY INTEGER COMMA . INTEGER RPAREN EQUALS string_expression

    INTEGER         shift and go to state 214


state 161

    (37) let -> LET SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    $end            reduce using rule 37 (let -> LET SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 162

    (46) if -> IF numeric_expression EQUALS numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 215
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 163

    (49) if -> IF numeric_expression LT numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 216
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 164

    (47) if -> IF numeric_expression LT GT . numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 217
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 165

    (51) if -> IF numeric_expression LT EQUALS . numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 218
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 166

    (48) if -> IF numeric_expression GT numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 219
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 167

    (50) if -> IF numeric_expression GT EQUALS . numeric_expression THEN INTEGER
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 220
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 168

    (126) numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    LT              reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    GT              reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    CIRCUMFLEX      reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    TIMES           reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    DIVIDE          reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    PLUS            reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    MINUS           reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    SEMI_COLON      reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    COMMA           reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    $end            reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    GO              reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    error           reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    RPAREN          reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    THEN            reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    TO              reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)
    STEP            reduce using rule 126 (numeric_expression -> numeric_expression CIRCUMFLEX numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 120 ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 169

    (127) numeric_expression -> numeric_expression TIMES numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    LT              reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    GT              reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    TIMES           reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    DIVIDE          reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    PLUS            reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    MINUS           reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    SEMI_COLON      reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    COMMA           reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    $end            reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    GO              reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    error           reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    RPAREN          reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    THEN            reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    TO              reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    STEP            reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .)
    CIRCUMFLEX      shift and go to state 120

  ! CIRCUMFLEX      [ reduce using rule 127 (numeric_expression -> numeric_expression TIMES numeric_expression .) ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 170

    (128) numeric_expression -> numeric_expression DIVIDE numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    LT              reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    GT              reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    TIMES           reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    DIVIDE          reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    PLUS            reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    MINUS           reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    SEMI_COLON      reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    COMMA           reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    $end            reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    GO              reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    error           reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    RPAREN          reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    THEN            reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    TO              reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    STEP            reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .)
    CIRCUMFLEX      shift and go to state 120

  ! CIRCUMFLEX      [ reduce using rule 128 (numeric_expression -> numeric_expression DIVIDE numeric_expression .) ]
  ! TIMES           [ shift and go to state 121 ]
  ! DIVIDE          [ shift and go to state 122 ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 171

    (129) numeric_expression -> numeric_expression PLUS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    LT              reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    GT              reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    PLUS            reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    MINUS           reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    SEMI_COLON      reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    COMMA           reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    $end            reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    GO              reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    error           reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    RPAREN          reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    THEN            reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    TO              reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    STEP            reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122

  ! CIRCUMFLEX      [ reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! TIMES           [ reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 129 (numeric_expression -> numeric_expression PLUS numeric_expression .) ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 172

    (130) numeric_expression -> numeric_expression MINUS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    EQUALS          reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    LT              reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    GT              reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    PLUS            reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    MINUS           reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    SEMI_COLON      reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    COMMA           reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    $end            reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    GO              reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    error           reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    RPAREN          reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    THEN            reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    TO              reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    STEP            reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122

  ! CIRCUMFLEX      [ reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! TIMES           [ reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 130 (numeric_expression -> numeric_expression MINUS numeric_expression .) ]
  ! PLUS            [ shift and go to state 123 ]
  ! MINUS           [ shift and go to state 124 ]


state 173

    (52) if -> IF string_expression EQUALS string_expression . THEN INTEGER

    THEN            shift and go to state 221


state 174

    (125) numeric_expression -> LPAREN numeric_expression RPAREN .

    EQUALS          reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    LT              reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    GT              reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    CIRCUMFLEX      reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    TIMES           reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    DIVIDE          reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    PLUS            reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    MINUS           reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    SEMI_COLON      reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    COMMA           reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    $end            reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    GO              reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    error           reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    RPAREN          reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    THEN            reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    TO              reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)
    STEP            reduce using rule 125 (numeric_expression -> LPAREN numeric_expression RPAREN .)


state 175

    (145) numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .

    EQUALS          reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    LT              reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    GT              reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    CIRCUMFLEX      reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    TIMES           reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    DIVIDE          reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    PLUS            reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    MINUS           reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    SEMI_COLON      reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    COMMA           reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    $end            reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    GO              reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    error           reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    RPAREN          reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    THEN            reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    TO              reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    STEP            reduce using rule 145 (numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)


state 176

    (146) numeric_array -> NUMERIC_ARRAY INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 222


state 177

    (158) string_array -> STRING_ARRAY numeric_expression RPAREN .

    EQUALS          reduce using rule 158 (string_array -> STRING_ARRAY numeric_expression RPAREN .)
    SEMI_COLON      reduce using rule 158 (string_array -> STRING_ARRAY numeric_expression RPAREN .)
    COMMA           reduce using rule 158 (string_array -> STRING_ARRAY numeric_expression RPAREN .)
    $end            reduce using rule 158 (string_array -> STRING_ARRAY numeric_expression RPAREN .)
    THEN            reduce using rule 158 (string_array -> STRING_ARRAY numeric_expression RPAREN .)


state 178

    (159) string_array -> STRING_ARRAY numeric_expression COMMA . numeric_expression RPAREN
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 223
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 179

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression . TO numeric_expression STEP numeric_expression
    (77) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression . TO numeric_expression
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    TO              shift and go to state 224
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 180

    (82) print_list -> print_list print_list_sep print_list .
    (82) print_list -> print_list . print_list_sep print_list
    (83) print_list -> print_list . print_list_sep
    (86) print_list_sep -> . print_semi_colon
    (87) print_list_sep -> . print_comma
    (88) print_semi_colon -> . SEMI_COLON
    (89) print_comma -> . COMMA

  ! shift/reduce conflict for SEMI_COLON resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 82 (print_list -> print_list print_list_sep print_list .)
    SEMI_COLON      shift and go to state 92
    COMMA           shift and go to state 93

  ! SEMI_COLON      [ reduce using rule 82 (print_list -> print_list print_list_sep print_list .) ]
  ! COMMA           [ reduce using rule 82 (print_list -> print_list print_list_sep print_list .) ]

    print_list_sep                 shift and go to state 138
    print_semi_colon               shift and go to state 88
    print_comma                    shift and go to state 89

state 181

    (119) input -> INPUT string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE .

    $end            reduce using rule 119 (input -> INPUT string_expression SEMI_COLON SIMPLE_NUMERIC_VARIABLE .)


state 182

    (120) input -> INPUT string_expression SEMI_COLON STRING_VARIABLE .

    $end            reduce using rule 120 (input -> INPUT string_expression SEMI_COLON STRING_VARIABLE .)


state 183

    (107) fn_body_u_num_fn -> FN . LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> FN .

    LPAREN          shift and go to state 225
    CIRCUMFLEX      reduce using rule 108 (fn_body_u_num_fn -> FN .)
    TIMES           reduce using rule 108 (fn_body_u_num_fn -> FN .)
    DIVIDE          reduce using rule 108 (fn_body_u_num_fn -> FN .)
    PLUS            reduce using rule 108 (fn_body_u_num_fn -> FN .)
    MINUS           reduce using rule 108 (fn_body_u_num_fn -> FN .)
    $end            reduce using rule 108 (fn_body_u_num_fn -> FN .)
    RPAREN          reduce using rule 108 (fn_body_u_num_fn -> FN .)


state 184

    (90) def -> DEF FN EQUALS fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    $end            reduce using rule 90 (def -> DEF FN EQUALS fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 185

    (92) fn_body_numeric_expression -> LPAREN . fn_body_numeric_expression RPAREN
    (160) empty -> LPAREN . RPAREN
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 231
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 186

    (100) fn_body_numeric_expression -> MINUS . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 232
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 187

    (98) fn_body_numeric_expression -> empty .

    CIRCUMFLEX      reduce using rule 98 (fn_body_numeric_expression -> empty .)
    TIMES           reduce using rule 98 (fn_body_numeric_expression -> empty .)
    DIVIDE          reduce using rule 98 (fn_body_numeric_expression -> empty .)
    PLUS            reduce using rule 98 (fn_body_numeric_expression -> empty .)
    MINUS           reduce using rule 98 (fn_body_numeric_expression -> empty .)
    $end            reduce using rule 98 (fn_body_numeric_expression -> empty .)
    RPAREN          reduce using rule 98 (fn_body_numeric_expression -> empty .)


state 188

    (99) fn_body_numeric_expression -> fn_body_primary .

    CIRCUMFLEX      reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    TIMES           reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    DIVIDE          reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    PLUS            reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    MINUS           reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    $end            reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)
    RPAREN          reduce using rule 99 (fn_body_numeric_expression -> fn_body_primary .)


state 189

    (101) fn_body_primary -> INTEGER .

    CIRCUMFLEX      reduce using rule 101 (fn_body_primary -> INTEGER .)
    TIMES           reduce using rule 101 (fn_body_primary -> INTEGER .)
    DIVIDE          reduce using rule 101 (fn_body_primary -> INTEGER .)
    PLUS            reduce using rule 101 (fn_body_primary -> INTEGER .)
    MINUS           reduce using rule 101 (fn_body_primary -> INTEGER .)
    $end            reduce using rule 101 (fn_body_primary -> INTEGER .)
    RPAREN          reduce using rule 101 (fn_body_primary -> INTEGER .)


state 190

    (102) fn_body_primary -> FLOAT .

    CIRCUMFLEX      reduce using rule 102 (fn_body_primary -> FLOAT .)
    TIMES           reduce using rule 102 (fn_body_primary -> FLOAT .)
    DIVIDE          reduce using rule 102 (fn_body_primary -> FLOAT .)
    PLUS            reduce using rule 102 (fn_body_primary -> FLOAT .)
    MINUS           reduce using rule 102 (fn_body_primary -> FLOAT .)
    $end            reduce using rule 102 (fn_body_primary -> FLOAT .)
    RPAREN          reduce using rule 102 (fn_body_primary -> FLOAT .)


state 191

    (103) fn_body_primary -> fn_body_u_num_fn .

    CIRCUMFLEX      reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    TIMES           reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    DIVIDE          reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    PLUS            reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    MINUS           reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    $end            reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)
    RPAREN          reduce using rule 103 (fn_body_primary -> fn_body_u_num_fn .)


state 192

    (104) fn_body_primary -> fn_body_b_num_fn .

    CIRCUMFLEX      reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    TIMES           reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    DIVIDE          reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    PLUS            reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    MINUS           reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    $end            reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)
    RPAREN          reduce using rule 104 (fn_body_primary -> fn_body_b_num_fn .)


state 193

    (105) fn_body_primary -> fn_body_simple_numeric_variable .

    CIRCUMFLEX      reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    TIMES           reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    DIVIDE          reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    PLUS            reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    MINUS           reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    $end            reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)
    RPAREN          reduce using rule 105 (fn_body_primary -> fn_body_simple_numeric_variable .)


state 194

    (106) fn_body_primary -> fn_body_numeric_array .

    CIRCUMFLEX      reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    TIMES           reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    DIVIDE          reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    PLUS            reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    MINUS           reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    $end            reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)
    RPAREN          reduce using rule 106 (fn_body_primary -> fn_body_numeric_array .)


state 195

    (109) fn_body_b_num_fn -> B_NUM_FN . empty
    (110) fn_body_b_num_fn -> B_NUM_FN . fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 235
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    empty                          shift and go to state 233
    fn_body_numeric_expression     shift and go to state 234
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 196

    (111) fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .

    CIRCUMFLEX      reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    TIMES           reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    DIVIDE          reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    PLUS            reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    MINUS           reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    $end            reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)
    RPAREN          reduce using rule 111 (fn_body_simple_numeric_variable -> SIMPLE_NUMERIC_VARIABLE .)


state 197

    (112) fn_body_numeric_array -> NUMERIC_ARRAY . INTEGER RPAREN
    (113) fn_body_numeric_array -> NUMERIC_ARRAY . INTEGER COMMA INTEGER RPAREN

    INTEGER         shift and go to state 236


state 198

    (91) def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE . RPAREN EQUALS fn_body_numeric_expression

    RPAREN          shift and go to state 237


state 199

    (58) on -> ON numeric_expression GO TO . line_number_list
    (62) on -> ON numeric_expression GO TO . error
    (63) line_number_list -> . line_number_list line_number_list_sep line_number_list
    (64) line_number_list -> . INTEGER

    error           shift and go to state 239
    INTEGER         shift and go to state 240

    line_number_list               shift and go to state 238

state 200

    (61) on -> ON numeric_expression GO error . line_number_list
    (63) line_number_list -> . line_number_list line_number_list_sep line_number_list
    (64) line_number_list -> . INTEGER

    INTEGER         shift and go to state 240

    line_number_list               shift and go to state 241

state 201

    (60) on -> ON numeric_expression error TO . line_number_list
    (63) line_number_list -> . line_number_list line_number_list_sep line_number_list
    (64) line_number_list -> . INTEGER

    INTEGER         shift and go to state 240

    line_number_list               shift and go to state 242

state 202

    (59) on -> ON error GO TO . line_number_list
    (63) line_number_list -> . line_number_list line_number_list_sep line_number_list
    (64) line_number_list -> . INTEGER

    INTEGER         shift and go to state 240

    line_number_list               shift and go to state 243

state 203

    (67) data_list -> data_list data_list_sep data_list .
    (67) data_list -> data_list . data_list_sep data_list
    (69) data_list_sep -> . COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 67 (data_list -> data_list data_list_sep data_list .)
    COMMA           shift and go to state 147

  ! COMMA           [ reduce using rule 67 (data_list -> data_list data_list_sep data_list .) ]

    data_list_sep                  shift and go to state 146

state 204

    (71) read_list -> read_list read_list_sep read_list .
    (71) read_list -> read_list . read_list_sep read_list
    (74) read_list_sep -> . COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 71 (read_list -> read_list read_list_sep read_list .)
    COMMA           shift and go to state 149

  ! COMMA           [ reduce using rule 71 (read_list -> read_list read_list_sep read_list .) ]

    read_list_sep                  shift and go to state 148

state 205

    (38) dim -> DIM STRING_ARRAY INTEGER RPAREN .

    $end            reduce using rule 38 (dim -> DIM STRING_ARRAY INTEGER RPAREN .)


state 206

    (40) dim -> DIM STRING_ARRAY INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 244


state 207

    (39) dim -> DIM NUMERIC_ARRAY INTEGER RPAREN .

    $end            reduce using rule 39 (dim -> DIM NUMERIC_ARRAY INTEGER RPAREN .)


state 208

    (41) dim -> DIM NUMERIC_ARRAY INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 245


state 209

    (42) dim -> DIM error INTEGER RPAREN .

    $end            reduce using rule 42 (dim -> DIM error INTEGER RPAREN .)


state 210

    (43) dim -> DIM error INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 246


state 211

    (33) let -> LET NUMERIC_ARRAY INTEGER RPAREN EQUALS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 247
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 212

    (34) let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER . RPAREN EQUALS numeric_expression

    RPAREN          shift and go to state 248


state 213

    (35) let -> LET STRING_ARRAY INTEGER RPAREN EQUALS . string_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80

    string_expression              shift and go to state 249
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 214

    (36) let -> LET STRING_ARRAY INTEGER COMMA INTEGER . RPAREN EQUALS string_expression

    RPAREN          shift and go to state 250


state 215

    (46) if -> IF numeric_expression EQUALS numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 251


state 216

    (49) if -> IF numeric_expression LT numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 252


state 217

    (47) if -> IF numeric_expression LT GT numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 253
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 218

    (51) if -> IF numeric_expression LT EQUALS numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 254
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 219

    (48) if -> IF numeric_expression GT numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 255


state 220

    (50) if -> IF numeric_expression GT EQUALS numeric_expression . THEN INTEGER
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    THEN            shift and go to state 256
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 221

    (52) if -> IF string_expression EQUALS string_expression THEN . INTEGER

    INTEGER         shift and go to state 257


state 222

    (146) numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 258


state 223

    (159) string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression . RPAREN
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    RPAREN          shift and go to state 259
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 224

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO . numeric_expression STEP numeric_expression
    (77) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 260
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 225

    (107) fn_body_u_num_fn -> FN LPAREN . fn_body_numeric_expression RPAREN
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 261
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 226

    (93) fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 262
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 227

    (94) fn_body_numeric_expression -> fn_body_numeric_expression TIMES . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 263
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 228

    (95) fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 264
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 229

    (96) fn_body_numeric_expression -> fn_body_numeric_expression PLUS . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 265
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 230

    (97) fn_body_numeric_expression -> fn_body_numeric_expression MINUS . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 266
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 231

    (92) fn_body_numeric_expression -> LPAREN fn_body_numeric_expression . RPAREN
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    RPAREN          shift and go to state 267
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 232

    (100) fn_body_numeric_expression -> MINUS fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    CIRCUMFLEX      reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    TIMES           reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    DIVIDE          reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    PLUS            reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    MINUS           reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    $end            reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)
    RPAREN          reduce using rule 100 (fn_body_numeric_expression -> MINUS fn_body_numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 226 ]
  ! TIMES           [ shift and go to state 227 ]
  ! DIVIDE          [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 233

    (109) fn_body_b_num_fn -> B_NUM_FN empty .
    (98) fn_body_numeric_expression -> empty .

  ! reduce/reduce conflict for CIRCUMFLEX resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for TIMES resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for PLUS resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for MINUS resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for $end resolved using rule 98 (fn_body_numeric_expression -> empty .)
  ! reduce/reduce conflict for RPAREN resolved using rule 98 (fn_body_numeric_expression -> empty .)
    CIRCUMFLEX      reduce using rule 98 (fn_body_numeric_expression -> empty .)
    TIMES           reduce using rule 98 (fn_body_numeric_expression -> empty .)
    DIVIDE          reduce using rule 98 (fn_body_numeric_expression -> empty .)
    PLUS            reduce using rule 98 (fn_body_numeric_expression -> empty .)
    MINUS           reduce using rule 98 (fn_body_numeric_expression -> empty .)
    $end            reduce using rule 98 (fn_body_numeric_expression -> empty .)
    RPAREN          reduce using rule 98 (fn_body_numeric_expression -> empty .)

  ! CIRCUMFLEX      [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! TIMES           [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! DIVIDE          [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! PLUS            [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! MINUS           [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! $end            [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]
  ! RPAREN          [ reduce using rule 109 (fn_body_b_num_fn -> B_NUM_FN empty .) ]


state 234

    (110) fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    CIRCUMFLEX      reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    TIMES           reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    DIVIDE          reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    PLUS            reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    MINUS           reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    $end            reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)
    RPAREN          reduce using rule 110 (fn_body_b_num_fn -> B_NUM_FN fn_body_numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 226 ]
  ! TIMES           [ shift and go to state 227 ]
  ! DIVIDE          [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 235

    (160) empty -> LPAREN . RPAREN
    (92) fn_body_numeric_expression -> LPAREN . fn_body_numeric_expression RPAREN
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    RPAREN          shift and go to state 127
    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 231
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 236

    (112) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER . RPAREN
    (113) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER . COMMA INTEGER RPAREN

    RPAREN          shift and go to state 268
    COMMA           shift and go to state 269


state 237

    (91) def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN . EQUALS fn_body_numeric_expression

    EQUALS          shift and go to state 270


state 238

    (58) on -> ON numeric_expression GO TO line_number_list .
    (63) line_number_list -> line_number_list . line_number_list_sep line_number_list
    (65) line_number_list_sep -> . COMMA

    $end            reduce using rule 58 (on -> ON numeric_expression GO TO line_number_list .)
    COMMA           shift and go to state 272

    line_number_list_sep           shift and go to state 271

state 239

    (62) on -> ON numeric_expression GO TO error .

    $end            reduce using rule 62 (on -> ON numeric_expression GO TO error .)


state 240

    (64) line_number_list -> INTEGER .

    COMMA           reduce using rule 64 (line_number_list -> INTEGER .)
    $end            reduce using rule 64 (line_number_list -> INTEGER .)


state 241

    (61) on -> ON numeric_expression GO error line_number_list .
    (63) line_number_list -> line_number_list . line_number_list_sep line_number_list
    (65) line_number_list_sep -> . COMMA

    $end            reduce using rule 61 (on -> ON numeric_expression GO error line_number_list .)
    COMMA           shift and go to state 272

    line_number_list_sep           shift and go to state 271

state 242

    (60) on -> ON numeric_expression error TO line_number_list .
    (63) line_number_list -> line_number_list . line_number_list_sep line_number_list
    (65) line_number_list_sep -> . COMMA

    $end            reduce using rule 60 (on -> ON numeric_expression error TO line_number_list .)
    COMMA           shift and go to state 272

    line_number_list_sep           shift and go to state 271

state 243

    (59) on -> ON error GO TO line_number_list .
    (63) line_number_list -> line_number_list . line_number_list_sep line_number_list
    (65) line_number_list_sep -> . COMMA

    $end            reduce using rule 59 (on -> ON error GO TO line_number_list .)
    COMMA           shift and go to state 272

    line_number_list_sep           shift and go to state 271

state 244

    (40) dim -> DIM STRING_ARRAY INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 273


state 245

    (41) dim -> DIM NUMERIC_ARRAY INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 274


state 246

    (43) dim -> DIM error INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 275


state 247

    (33) let -> LET NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    $end            reduce using rule 33 (let -> LET NUMERIC_ARRAY INTEGER RPAREN EQUALS numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 248

    (34) let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN . EQUALS numeric_expression

    EQUALS          shift and go to state 276


state 249

    (35) let -> LET STRING_ARRAY INTEGER RPAREN EQUALS string_expression .

    $end            reduce using rule 35 (let -> LET STRING_ARRAY INTEGER RPAREN EQUALS string_expression .)


state 250

    (36) let -> LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN . EQUALS string_expression

    EQUALS          shift and go to state 277


state 251

    (46) if -> IF numeric_expression EQUALS numeric_expression THEN INTEGER .

    $end            reduce using rule 46 (if -> IF numeric_expression EQUALS numeric_expression THEN INTEGER .)


state 252

    (49) if -> IF numeric_expression LT numeric_expression THEN INTEGER .

    $end            reduce using rule 49 (if -> IF numeric_expression LT numeric_expression THEN INTEGER .)


state 253

    (47) if -> IF numeric_expression LT GT numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 278


state 254

    (51) if -> IF numeric_expression LT EQUALS numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 279


state 255

    (48) if -> IF numeric_expression GT numeric_expression THEN INTEGER .

    $end            reduce using rule 48 (if -> IF numeric_expression GT numeric_expression THEN INTEGER .)


state 256

    (50) if -> IF numeric_expression GT EQUALS numeric_expression THEN . INTEGER

    INTEGER         shift and go to state 280


state 257

    (52) if -> IF string_expression EQUALS string_expression THEN INTEGER .

    $end            reduce using rule 52 (if -> IF string_expression EQUALS string_expression THEN INTEGER .)


state 258

    (146) numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .

    EQUALS          reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    LT              reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    GT              reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    CIRCUMFLEX      reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    TIMES           reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    DIVIDE          reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    PLUS            reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    MINUS           reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    SEMI_COLON      reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    COMMA           reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    $end            reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    GO              reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    error           reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    RPAREN          reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    THEN            reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    TO              reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    STEP            reduce using rule 146 (numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)


state 259

    (159) string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .

    EQUALS          reduce using rule 159 (string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .)
    SEMI_COLON      reduce using rule 159 (string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .)
    COMMA           reduce using rule 159 (string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .)
    $end            reduce using rule 159 (string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .)
    THEN            reduce using rule 159 (string_array -> STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN .)


state 260

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression . STEP numeric_expression
    (77) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    STEP            shift and go to state 281
    $end            reduce using rule 77 (for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 261

    (107) fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression . RPAREN
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    RPAREN          shift and go to state 282
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 262

    (93) fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    CIRCUMFLEX      reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    TIMES           reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    DIVIDE          reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    PLUS            reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    MINUS           reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    $end            reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)
    RPAREN          reduce using rule 93 (fn_body_numeric_expression -> fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression .)

  ! CIRCUMFLEX      [ shift and go to state 226 ]
  ! TIMES           [ shift and go to state 227 ]
  ! DIVIDE          [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 263

    (94) fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    TIMES           reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    DIVIDE          reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    PLUS            reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    MINUS           reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    $end            reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    RPAREN          reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226

  ! CIRCUMFLEX      [ reduce using rule 94 (fn_body_numeric_expression -> fn_body_numeric_expression TIMES fn_body_numeric_expression .) ]
  ! TIMES           [ shift and go to state 227 ]
  ! DIVIDE          [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 264

    (95) fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    TIMES           reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    DIVIDE          reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    PLUS            reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    MINUS           reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    $end            reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    RPAREN          reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226

  ! CIRCUMFLEX      [ reduce using rule 95 (fn_body_numeric_expression -> fn_body_numeric_expression DIVIDE fn_body_numeric_expression .) ]
  ! TIMES           [ shift and go to state 227 ]
  ! DIVIDE          [ shift and go to state 228 ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 265

    (96) fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    PLUS            reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .)
    MINUS           reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .)
    $end            reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .)
    RPAREN          reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228

  ! CIRCUMFLEX      [ reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .) ]
  ! TIMES           [ reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 96 (fn_body_numeric_expression -> fn_body_numeric_expression PLUS fn_body_numeric_expression .) ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 266

    (97) fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    PLUS            reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .)
    MINUS           reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .)
    $end            reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .)
    RPAREN          reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228

  ! CIRCUMFLEX      [ reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .) ]
  ! TIMES           [ reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .) ]
  ! DIVIDE          [ reduce using rule 97 (fn_body_numeric_expression -> fn_body_numeric_expression MINUS fn_body_numeric_expression .) ]
  ! PLUS            [ shift and go to state 229 ]
  ! MINUS           [ shift and go to state 230 ]


state 267

    (92) fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .

    CIRCUMFLEX      reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    TIMES           reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    DIVIDE          reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    PLUS            reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    MINUS           reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    $end            reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)
    RPAREN          reduce using rule 92 (fn_body_numeric_expression -> LPAREN fn_body_numeric_expression RPAREN .)


state 268

    (112) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .

    CIRCUMFLEX      reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    TIMES           reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    DIVIDE          reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    PLUS            reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    MINUS           reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    $end            reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)
    RPAREN          reduce using rule 112 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER RPAREN .)


state 269

    (113) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA . INTEGER RPAREN

    INTEGER         shift and go to state 283


state 270

    (91) def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS . fn_body_numeric_expression
    (92) fn_body_numeric_expression -> . LPAREN fn_body_numeric_expression RPAREN
    (93) fn_body_numeric_expression -> . fn_body_numeric_expression CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> . fn_body_numeric_expression TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> . fn_body_numeric_expression DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> . fn_body_numeric_expression PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> . fn_body_numeric_expression MINUS fn_body_numeric_expression
    (98) fn_body_numeric_expression -> . empty
    (99) fn_body_numeric_expression -> . fn_body_primary
    (100) fn_body_numeric_expression -> . MINUS fn_body_numeric_expression
    (160) empty -> . LPAREN RPAREN
    (101) fn_body_primary -> . INTEGER
    (102) fn_body_primary -> . FLOAT
    (103) fn_body_primary -> . fn_body_u_num_fn
    (104) fn_body_primary -> . fn_body_b_num_fn
    (105) fn_body_primary -> . fn_body_simple_numeric_variable
    (106) fn_body_primary -> . fn_body_numeric_array
    (107) fn_body_u_num_fn -> . FN LPAREN fn_body_numeric_expression RPAREN
    (108) fn_body_u_num_fn -> . FN
    (109) fn_body_b_num_fn -> . B_NUM_FN empty
    (110) fn_body_b_num_fn -> . B_NUM_FN fn_body_numeric_expression
    (111) fn_body_simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (112) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (113) fn_body_numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 185
    MINUS           shift and go to state 186
    INTEGER         shift and go to state 189
    FLOAT           shift and go to state 190
    FN              shift and go to state 183
    B_NUM_FN        shift and go to state 195
    SIMPLE_NUMERIC_VARIABLE shift and go to state 196
    NUMERIC_ARRAY   shift and go to state 197

    fn_body_numeric_expression     shift and go to state 284
    empty                          shift and go to state 187
    fn_body_primary                shift and go to state 188
    fn_body_u_num_fn               shift and go to state 191
    fn_body_b_num_fn               shift and go to state 192
    fn_body_simple_numeric_variable shift and go to state 193
    fn_body_numeric_array          shift and go to state 194

state 271

    (63) line_number_list -> line_number_list line_number_list_sep . line_number_list
    (63) line_number_list -> . line_number_list line_number_list_sep line_number_list
    (64) line_number_list -> . INTEGER

    INTEGER         shift and go to state 240

    line_number_list               shift and go to state 285

state 272

    (65) line_number_list_sep -> COMMA .

    INTEGER         reduce using rule 65 (line_number_list_sep -> COMMA .)


state 273

    (40) dim -> DIM STRING_ARRAY INTEGER COMMA INTEGER RPAREN .

    $end            reduce using rule 40 (dim -> DIM STRING_ARRAY INTEGER COMMA INTEGER RPAREN .)


state 274

    (41) dim -> DIM NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .

    $end            reduce using rule 41 (dim -> DIM NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)


state 275

    (43) dim -> DIM error INTEGER COMMA INTEGER RPAREN .

    $end            reduce using rule 43 (dim -> DIM error INTEGER COMMA INTEGER RPAREN .)


state 276

    (34) let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 286
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 277

    (36) let -> LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS . string_expression
    (149) string_expression -> . string_literal
    (150) string_expression -> . string_variable
    (151) string_expression -> . b_str_fn
    (152) string_literal -> . STRING_LITERAL
    (153) string_variable -> . simple_string_variable
    (154) string_variable -> . string_array
    (155) b_str_fn -> . B_STR_FN empty
    (156) b_str_fn -> . B_STR_FN numeric_expression
    (157) simple_string_variable -> . STRING_VARIABLE
    (158) string_array -> . STRING_ARRAY numeric_expression RPAREN
    (159) string_array -> . STRING_ARRAY numeric_expression COMMA numeric_expression RPAREN

    STRING_LITERAL  shift and go to state 71
    B_STR_FN        shift and go to state 74
    STRING_VARIABLE shift and go to state 79
    STRING_ARRAY    shift and go to state 80

    string_expression              shift and go to state 287
    string_literal                 shift and go to state 63
    string_variable                shift and go to state 64
    b_str_fn                       shift and go to state 65
    simple_string_variable         shift and go to state 72
    string_array                   shift and go to state 73

state 278

    (47) if -> IF numeric_expression LT GT numeric_expression THEN INTEGER .

    $end            reduce using rule 47 (if -> IF numeric_expression LT GT numeric_expression THEN INTEGER .)


state 279

    (51) if -> IF numeric_expression LT EQUALS numeric_expression THEN INTEGER .

    $end            reduce using rule 51 (if -> IF numeric_expression LT EQUALS numeric_expression THEN INTEGER .)


state 280

    (50) if -> IF numeric_expression GT EQUALS numeric_expression THEN INTEGER .

    $end            reduce using rule 50 (if -> IF numeric_expression GT EQUALS numeric_expression THEN INTEGER .)


state 281

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP . numeric_expression
    (125) numeric_expression -> . LPAREN numeric_expression RPAREN
    (126) numeric_expression -> . numeric_expression CIRCUMFLEX numeric_expression
    (127) numeric_expression -> . numeric_expression TIMES numeric_expression
    (128) numeric_expression -> . numeric_expression DIVIDE numeric_expression
    (129) numeric_expression -> . numeric_expression PLUS numeric_expression
    (130) numeric_expression -> . numeric_expression MINUS numeric_expression
    (131) numeric_expression -> . empty
    (132) numeric_expression -> . primary
    (133) numeric_expression -> . MINUS numeric_expression
    (160) empty -> . LPAREN RPAREN
    (134) primary -> . INTEGER
    (135) primary -> . FLOAT
    (136) primary -> . u_num_fn
    (137) primary -> . b_num_fn
    (138) primary -> . simple_numeric_variable
    (139) primary -> . numeric_array
    (142) u_num_fn -> . FN numeric_expression
    (143) u_num_fn -> . FN
    (140) b_num_fn -> . B_NUM_FN empty
    (141) b_num_fn -> . B_NUM_FN numeric_expression
    (144) simple_numeric_variable -> . SIMPLE_NUMERIC_VARIABLE
    (145) numeric_array -> . NUMERIC_ARRAY INTEGER RPAREN
    (146) numeric_array -> . NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN

    LPAREN          shift and go to state 59
    MINUS           shift and go to state 60
    INTEGER         shift and go to state 57
    FLOAT           shift and go to state 66
    FN              shift and go to state 75
    B_NUM_FN        shift and go to state 76
    SIMPLE_NUMERIC_VARIABLE shift and go to state 77
    NUMERIC_ARRAY   shift and go to state 78

    numeric_expression             shift and go to state 288
    empty                          shift and go to state 61
    primary                        shift and go to state 62
    u_num_fn                       shift and go to state 67
    b_num_fn                       shift and go to state 68
    simple_numeric_variable        shift and go to state 69
    numeric_array                  shift and go to state 70

state 282

    (107) fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .

    CIRCUMFLEX      reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    TIMES           reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    DIVIDE          reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    PLUS            reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    MINUS           reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    $end            reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)
    RPAREN          reduce using rule 107 (fn_body_u_num_fn -> FN LPAREN fn_body_numeric_expression RPAREN .)


state 283

    (113) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER . RPAREN

    RPAREN          shift and go to state 289


state 284

    (91) def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression .
    (93) fn_body_numeric_expression -> fn_body_numeric_expression . CIRCUMFLEX fn_body_numeric_expression
    (94) fn_body_numeric_expression -> fn_body_numeric_expression . TIMES fn_body_numeric_expression
    (95) fn_body_numeric_expression -> fn_body_numeric_expression . DIVIDE fn_body_numeric_expression
    (96) fn_body_numeric_expression -> fn_body_numeric_expression . PLUS fn_body_numeric_expression
    (97) fn_body_numeric_expression -> fn_body_numeric_expression . MINUS fn_body_numeric_expression

    $end            reduce using rule 91 (def -> DEF FN LPAREN SIMPLE_NUMERIC_VARIABLE RPAREN EQUALS fn_body_numeric_expression .)
    CIRCUMFLEX      shift and go to state 226
    TIMES           shift and go to state 227
    DIVIDE          shift and go to state 228
    PLUS            shift and go to state 229
    MINUS           shift and go to state 230


state 285

    (63) line_number_list -> line_number_list line_number_list_sep line_number_list .
    (63) line_number_list -> line_number_list . line_number_list_sep line_number_list
    (65) line_number_list_sep -> . COMMA

  ! shift/reduce conflict for COMMA resolved as shift
    $end            reduce using rule 63 (line_number_list -> line_number_list line_number_list_sep line_number_list .)
    COMMA           shift and go to state 272

  ! COMMA           [ reduce using rule 63 (line_number_list -> line_number_list line_number_list_sep line_number_list .) ]

    line_number_list_sep           shift and go to state 271

state 286

    (34) let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    $end            reduce using rule 34 (let -> LET NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 287

    (36) let -> LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression .

    $end            reduce using rule 36 (let -> LET STRING_ARRAY INTEGER COMMA INTEGER RPAREN EQUALS string_expression .)


state 288

    (76) for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression .
    (126) numeric_expression -> numeric_expression . CIRCUMFLEX numeric_expression
    (127) numeric_expression -> numeric_expression . TIMES numeric_expression
    (128) numeric_expression -> numeric_expression . DIVIDE numeric_expression
    (129) numeric_expression -> numeric_expression . PLUS numeric_expression
    (130) numeric_expression -> numeric_expression . MINUS numeric_expression

    $end            reduce using rule 76 (for -> FOR SIMPLE_NUMERIC_VARIABLE EQUALS numeric_expression TO numeric_expression STEP numeric_expression .)
    CIRCUMFLEX      shift and go to state 120
    TIMES           shift and go to state 121
    DIVIDE          shift and go to state 122
    PLUS            shift and go to state 123
    MINUS           shift and go to state 124


state 289

    (113) fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .

    CIRCUMFLEX      reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    TIMES           reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    DIVIDE          reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    PLUS            reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    MINUS           reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    $end            reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)
    RPAREN          reduce using rule 113 (fn_body_numeric_array -> NUMERIC_ARRAY INTEGER COMMA INTEGER RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMI_COLON in state 86 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 86 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 138 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 138 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 139 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 139 resolved as shift
WARNING: shift/reduce conflict for SEMI_COLON in state 180 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 180 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 203 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 204 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 285 resolved as shift
WARNING: reduce/reduce conflict in state 129 resolved using rule (numeric_expression -> empty)
WARNING: rejected rule (b_str_fn -> B_STR_FN empty) in state 129
WARNING: reduce/reduce conflict in state 133 resolved using rule (numeric_expression -> empty)
WARNING: rejected rule (b_num_fn -> B_NUM_FN empty) in state 133
WARNING: reduce/reduce conflict in state 233 resolved using rule (fn_body_numeric_expression -> empty)
WARNING: rejected rule (fn_body_b_num_fn -> B_NUM_FN empty) in state 233
WARNING: Rule (b_str_fn -> B_STR_FN empty) is never reduced
WARNING: Rule (b_num_fn -> B_NUM_FN empty) is never reduced
WARNING: Rule (fn_body_b_num_fn -> B_NUM_FN empty) is never reduced
